{
  "version": 3,
  "sources": ["../../node_modules/mermaid/src/diagrams/state/id-cache.js", "../../node_modules/mermaid/src/diagrams/state/shapes.js", "../../node_modules/mermaid/src/diagrams/state/stateRenderer.js", "../../node_modules/mermaid/src/diagrams/state/stateDiagram.ts"],
  "sourcesContent": ["const idCache = {};\n\nexport const set = (key, val) => {\n  idCache[key] = val;\n};\n\nexport const get = (k) => idCache[k];\nexport const keys = () => Object.keys(idCache);\nexport const size = () => keys().length;\n\nexport default {\n  get,\n  set,\n  keys,\n  size,\n};\n", "import { line, curveBasis } from 'd3';\nimport idCache from './id-cache.js';\nimport stateDb from './stateDb';\nimport utils from '../../utils';\nimport common from '../common/common';\nimport { getConfig } from '../../config';\nimport { log } from '../../logger';\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawStartState = (g) =>\n  g\n    .append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'black')\n    .attr('class', 'start-state')\n    .attr('r', getConfig().state.sizeUnit)\n    .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit)\n    .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit);\n\n/**\n * Draws a start state as a black circle\n *\n * @param {any} g\n */\nexport const drawDivider = (g) =>\n  g\n    .append('line')\n    .style('stroke', 'grey')\n    .style('stroke-dasharray', '3')\n    .attr('x1', getConfig().state.textHeight)\n    .attr('class', 'divider')\n    .attr('x2', getConfig().state.textHeight * 2)\n    .attr('y1', 0)\n    .attr('y2', 0);\n\n/**\n * Draws a an end state as a black circle\n *\n * @param {any} g\n * @param {any} stateDef\n */\nexport const drawSimpleState = (g, stateDef) => {\n  const state = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 2 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const classBox = state.node().getBBox();\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', classBox.width + 2 * getConfig().state.padding)\n    .attr('height', classBox.height + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return state;\n};\n\n/**\n * Draws a state with descriptions\n *\n * @param {any} g The d3 svg object to add the state to\n * @param {any} stateDef\n * @returns {any} The d3 svg state\n */\nexport const drawDescrState = (g, stateDef) => {\n  const addTspan = function (textEl, txt, isFirst) {\n    const tSpan = textEl\n      .append('tspan')\n      .attr('x', 2 * getConfig().state.padding)\n      .text(txt);\n    if (!isFirst) {\n      tSpan.attr('dy', getConfig().state.textHeight);\n    }\n  };\n  const title = g\n    .append('text')\n    .attr('x', 2 * getConfig().state.padding)\n    .attr('y', getConfig().state.textHeight + 1.3 * getConfig().state.padding)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.descriptions[0]);\n\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n\n  const description = g\n    .append('text') // text label for the x axis\n    .attr('x', getConfig().state.padding)\n    .attr(\n      'y',\n      titleHeight +\n        getConfig().state.padding * 0.4 +\n        getConfig().state.dividerMargin +\n        getConfig().state.textHeight\n    )\n    .attr('class', 'state-description');\n\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function (descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n\n  const descrLine = g\n    .append('line') // text label for the x axis\n    .attr('x1', getConfig().state.padding)\n    .attr('y1', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('y2', getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2)\n    .attr('class', 'descr-divider');\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n\n  descrLine.attr('x2', width + 3 * getConfig().state.padding);\n  // const classBox = title.node().getBBox();\n\n  g.insert('rect', ':first-child')\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding)\n    .attr('width', width + 2 * getConfig().state.padding)\n    .attr('height', descrBox.height + titleHeight + 2 * getConfig().state.padding)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\n/** Adds the creates a box around the existing content and adds a panel for the id on top of the content. */\n/**\n * Function that creates an title row and a frame around a substate for a composite state diagram.\n * The function returns a new d3 svg object with updated width and height properties;\n *\n * @param {any} g The d3 svg object for the substate to framed\n * @param {any} stateDef The info about the\n * @param {any} altBkg\n */\nexport const addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n\n  const title = g\n    .append('text')\n    .attr('x', 0)\n    .attr('y', getConfig().state.titleShift)\n    .attr('font-size', getConfig().state.fontSize)\n    .attr('class', 'state-title')\n    .text(stateDef.id);\n\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth); // + dblPad;\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  // const lineY = 1 - getConfig().state.textHeight;\n  // const descrLine = g\n  //   .append('line') // text label for the x axis\n  //   .attr('x1', 0)\n  //   .attr('y1', lineY)\n  //   .attr('y2', lineY)\n  //   .attr('class', 'descr-divider');\n\n  const graphBox = g.node().getBBox();\n  // descrLine.attr('x2', graphBox.width + getConfig().state.padding);\n\n  if (stateDef.doc) {\n    // console.warn(\n    //   stateDef.id,\n    //   'orgX: ',\n    //   orgX,\n    //   'width: ',\n    //   width,\n    //   'titleWidth: ',\n    //   titleWidth,\n    //   'orgWidth: ',\n    //   orgWidth,\n    //   'width',\n    //   width\n    // );\n  }\n\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n\n  const lineY = 1 - getConfig().state.textHeight;\n  // White color\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr('y', lineY)\n    .attr('class', altBkg ? 'alt-composit' : 'composit')\n    .attr('width', width)\n    .attr(\n      'height',\n      graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n    )\n    .attr('rx', '0');\n\n  title.attr('x', startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr('x', orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n\n  // Title background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    // Just needs to be higher then the descr line, will be clipped by the white color box\n    .attr('height', getConfig().state.textHeight * 3)\n    .attr('rx', getConfig().state.radius);\n\n  // Full background\n  g.insert('rect', ':first-child')\n    .attr('x', startX)\n    .attr(\n      'y',\n      getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n    )\n    .attr('width', width)\n    .attr('height', graphBox.height + 3 + 2 * getConfig().state.textHeight)\n    .attr('rx', getConfig().state.radius);\n\n  return g;\n};\n\nconst drawEndState = (g) => {\n  g.append('circle')\n    // .style('stroke', 'black')\n    // .style('fill', 'white')\n    .attr('class', 'end-state-outer')\n    .attr('r', getConfig().state.sizeUnit + getConfig().state.miniPadding)\n    .attr(\n      'cx',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    )\n    .attr(\n      'cy',\n      getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n    );\n\n  return (\n    g\n      .append('circle')\n      // .style('stroke', 'black')\n      // .style('fill', 'black')\n      .attr('class', 'end-state-inner')\n      .attr('r', getConfig().state.sizeUnit)\n      .attr('cx', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n      .attr('cy', getConfig().state.padding + getConfig().state.sizeUnit + 2)\n  );\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g\n    .append('rect')\n    .style('stroke', 'black')\n    .style('fill', 'black')\n    .attr('width', width)\n    .attr('height', height)\n    .attr('x', getConfig().state.padding)\n    .attr('y', getConfig().state.padding);\n};\n\nexport const drawText = function (elem, textData) {\n  // Remove and ignore br:s\n  const nText = textData.text.replace(common.lineBreakRegex, ' ');\n\n  const textElem = elem.append('text');\n  textElem.attr('x', textData.x);\n  textElem.attr('y', textData.y);\n  textElem.style('text-anchor', textData.anchor);\n  textElem.attr('fill', textData.fill);\n  if (textData.class !== undefined) {\n    textElem.attr('class', textData.class);\n  }\n\n  const span = textElem.append('tspan');\n  span.attr('x', textData.x + textData.textMargin * 2);\n  span.attr('fill', textData.fill);\n  span.text(nText);\n\n  return textElem;\n};\n\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n\n  const textElem = g.append('text');\n  textElem.style('text-anchor', 'start');\n  textElem.attr('class', 'noteText');\n\n  let text = _text.replace(/\\r\\n/g, '<br/>');\n  text = text.replace(/\\n/g, '<br/>');\n  const lines = text.split(common.lineBreakRegex);\n\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line of lines) {\n    const txt = line.trim();\n\n    if (txt.length > 0) {\n      const span = textElem.append('tspan');\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr('x', x + getConfig().state.noteMargin);\n      span.attr('y', y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\n\n/**\n * Draws a note to the diagram\n *\n * @param text - The text of the given note.\n * @param g - The element the note is attached to.\n */\n\nexport const drawNote = (text, g) => {\n  g.attr('class', 'state-note');\n  const note = g.append('rect').attr('x', 0).attr('y', getConfig().state.padding);\n  const rectElem = g.append('g');\n\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr('height', textHeight + 2 * getConfig().state.noteMargin);\n  note.attr('width', textWidth + getConfig().state.noteMargin * 2);\n\n  return note;\n};\n\n/**\n * Starting point for drawing a state. The function finds out the specifics about the state and\n * renders with appropriate function.\n *\n * @param {any} elem\n * @param {any} stateDef\n */\n\nexport const drawState = function (elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id: id,\n    label: stateDef.id,\n    width: 0,\n    height: 0,\n  };\n\n  const g = elem.append('g').attr('id', id).attr('class', 'stateGroup');\n\n  if (stateDef.type === 'start') {\n    drawStartState(g);\n  }\n  if (stateDef.type === 'end') {\n    drawEndState(g);\n  }\n  if (stateDef.type === 'fork' || stateDef.type === 'join') {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === 'note') {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === 'divider') {\n    drawDivider(g);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === 'default' && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n\n  idCache.set(id, stateInfo);\n  // stateCnt++;\n  return stateInfo;\n};\n\nlet edgeCount = 0;\nexport const drawEdge = function (elem, path, relation) {\n  const getRelationType = function (type) {\n    switch (type) {\n      case stateDb.relationType.AGGREGATION:\n        return 'aggregation';\n      case stateDb.relationType.EXTENSION:\n        return 'extension';\n      case stateDb.relationType.COMPOSITION:\n        return 'composition';\n      case stateDb.relationType.DEPENDENCY:\n        return 'dependency';\n    }\n  };\n\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n\n  // The data for our line\n  const lineData = path.points;\n\n  // This is the accessor function we talked about above\n  const lineFunction = line()\n    .x(function (d) {\n      return d.x;\n    })\n    .y(function (d) {\n      return d.y;\n    })\n    .curve(curveBasis);\n\n  const svgPath = elem\n    .append('path')\n    .attr('d', lineFunction(lineData))\n    .attr('id', 'edge' + edgeCount)\n    .attr('class', 'transition');\n  let url = '';\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url =\n      window.location.protocol +\n      '//' +\n      window.location.host +\n      window.location.pathname +\n      window.location.search;\n    url = url.replace(/\\(/g, '\\\\(');\n    url = url.replace(/\\)/g, '\\\\)');\n  }\n\n  svgPath.attr(\n    'marker-end',\n    'url(' + url + '#' + getRelationType(stateDb.relationType.DEPENDENCY) + 'End' + ')'\n  );\n\n  if (relation.title !== undefined) {\n    const label = elem.append('g').attr('class', 'stateLabel');\n\n    const { x, y } = utils.calcLabelPosition(path.points);\n\n    const rows = common.getRows(relation.title);\n\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label\n        .append('text')\n        .attr('text-anchor', 'middle')\n        .text(rows[i])\n        .attr('x', x)\n        .attr('y', y + titleHeight);\n\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n\n      log.info(boundstmp.x, x, y + titleHeight);\n\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info('Title height', titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n\n      titleRows.forEach((title, i) => title.attr('y', y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n\n    const bounds = label.node().getBBox();\n\n    label\n      .insert('rect', ':first-child')\n      .attr('class', 'box')\n      .attr('x', x - maxWidth / 2 - getConfig().state.padding / 2)\n      .attr('y', y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5)\n      .attr('width', maxWidth + getConfig().state.padding)\n      .attr('height', boxHeight + getConfig().state.padding);\n\n    log.info(bounds);\n\n    //label.attr('transform', '0 -' + (bounds.y / 2));\n\n    // Debug points\n    // path.points.forEach(point => {\n    //   g.append('circle')\n    //     .style('stroke', 'red')\n    //     .style('fill', 'red')\n    //     .attr('r', 1)\n    //     .attr('cx', point.x)\n    //     .attr('cy', point.y);\n    // });\n    // g.append('circle')\n    //   .style('stroke', 'blue')\n    //   .style('fill', 'blue')\n    //   .attr('r', 1)\n    //   .attr('cx', x)\n    //   .attr('cy', y);\n  }\n\n  edgeCount++;\n};\n", "import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport common from '../common/common';\nimport { drawState, addTitleAndBox, drawEdge } from './shapes';\nimport { getConfig } from '../../config';\nimport { configureSvgSize } from '../../setupGraphViewbox';\n\n// TODO Move conf object to main conf in mermaidAPI\nlet conf;\n\nconst transformationLog = {};\n\nexport const setConf = function () {\n  //no-op\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {any} elem\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 19,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // diagObj.db.clear();\n  // parser.parse(text);\n  log.debug('Rendering diagram ' + text);\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n    // acyclicer: 'greedy',\n    rankdir: 'RL',\n    // ranksep: '20'\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram, undefined, false, root, doc, diagObj);\n\n  const padding = conf.padding;\n  const bounds = diagram.node().getBBox();\n\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // zoom in a bit\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram, height, svgWidth, conf.useMaxWidth);\n\n  diagram.attr(\n    'viewBox',\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + ' ' + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\n\nconst renderDoc = (doc, diagram, parentId, altBkg, root, domDocument, diagObj) => {\n  // Layout graph, Create a new directed graph\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true,\n  });\n\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === 'relation') {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n\n  // Set an object for the graph label\n  if (parentId) {\n    graph.setGraph({\n      rankdir: 'LR',\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: 'tight-tree',\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true,\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: 'TB',\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: 'tight-tree',\n      // ranker: 'network-simplex'\n      isMultiGraph: true,\n    });\n  }\n\n  // Default to assigning a new object as a label for each new edge.\n  graph.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n\n  const keys = Object.keys(states);\n\n  let first = true;\n\n  for (const key of keys) {\n    const stateDef = states[key];\n\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram.append('g').attr('id', stateDef.id).attr('class', 'stateGroup');\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n\n      if (first) {\n        // first = false;\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        // sub = addIdAndBox(sub, stateDef);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n        // transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram, stateDef, graph);\n    }\n\n    if (stateDef.note) {\n      // Draw note note\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + '-note',\n        note: stateDef.note,\n        type: 'note',\n      };\n      const note = drawState(diagram, noteDef, graph);\n\n      // graph.setNode(node.id, node);\n      if (stateDef.note.position === 'left of') {\n        graph.setNode(node.id + '-note', note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + '-note', note);\n      }\n      // graph.setNode(node.id);\n      graph.setParent(node.id, node.id + '-group');\n      graph.setParent(node.id + '-note', node.id + '-group');\n    } else {\n      // Add nodes to the graph. The first argument is the node id. The second is\n      // metadata about the node. In this case we're going to add labels to each of\n      // our nodes.\n      graph.setNode(node.id, node);\n    }\n  }\n\n  log.debug('Count=', graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function (relation) {\n    cnt++;\n    log.debug('Setting edge', relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation: relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: 'c',\n      },\n      'id' + cnt\n    );\n  });\n\n  dagreLayout(graph);\n\n  log.debug('Graph after layout', graph.nodes());\n  const svgElem = diagram.node();\n\n  graph.nodes().forEach(function (v) {\n    if (v !== undefined && graph.node(v) !== undefined) {\n      log.warn('Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr(\n          'transform',\n          'translate(' +\n            (graph.node(v).x - graph.node(v).width / 2) +\n            ',' +\n            (graph.node(v).y +\n              (transformationLog[v] ? transformationLog[v].y : 0) -\n              graph.node(v).height / 2) +\n            ' )'\n        );\n      root\n        .select('#' + svgElem.id + ' #' + v)\n        .attr('data-x-shift', graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll('#' + svgElem.id + ' #' + v + ' .divider');\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute('data-x-shift'), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute('x1', 0 - pShift + 8);\n        divider.setAttribute('x2', pWidth - pShift - 8);\n      });\n    } else {\n      log.debug('No Node ' + v + ': ' + JSON.stringify(graph.node(v)));\n    }\n  });\n\n  let stateBox = svgElem.getBBox();\n\n  graph.edges().forEach(function (e) {\n    if (e !== undefined && graph.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n\n  stateBox = svgElem.getBBox();\n\n  const stateInfo = {\n    id: parentId ? parentId : 'root',\n    label: parentId ? parentId : 'root',\n    width: 0,\n    height: 0,\n  };\n\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n\n  log.debug('Doc rendered', stateInfo, graph);\n  return stateInfo;\n};\n\nexport default {\n  setConf,\n  draw,\n};\n", "import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],
  "mappings": "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",
  "names": ["idCache", "set", "key", "val", "get", "k", "keys", "size", "idCache$1", "drawStartState", "g", "getConfig", "drawDivider", "drawSimpleState", "stateDef", "state", "classBox", "drawDescrState", "addTspan", "textEl", "txt", "isFirst", "tSpan", "titleBox", "titleHeight", "description", "isSecond", "descr", "descrLine", "descrBox", "width", "addTitleAndBox", "altBkg", "pad", "dblPad", "orgBox", "orgWidth", "orgX", "title", "titleWidth", "startX", "graphBox", "lineY", "drawEndState", "drawForkJoinState", "height", "tmp", "_drawLongText", "_text", "x", "y", "textHeight", "textElem", "text", "lines", "common", "tHeight", "line", "span", "textBounds", "drawNote", "note", "rectElem", "textWidth", "drawState", "elem", "id", "stateInfo", "stateBox", "edgeCount", "drawEdge", "path", "relation", "getRelationType", "type", "stateDb", "p", "lineData", "lineFunction", "line_default", "d", "basis_default", "svgPath", "url", "label", "utils", "rows", "titleRows", "maxWidth", "minX", "i", "boundstmp", "log", "boxHeight", "heightAdj", "bounds", "conf", "transformationLog", "setConf", "insertMarkers", "draw", "_version", "diagObj", "securityLevel", "sandboxElement", "select_default", "root", "doc", "diagram", "Graph", "rootDoc", "renderDoc", "padding", "svgWidth", "configureSvgSize", "getLabelWidth", "parentId", "domDocument", "graph", "edgeFreeDoc", "states", "relations", "node", "sub", "boxBounds", "noteDef", "cnt", "dagreLayout", "svgElem", "v", "divider", "parent", "pWidth", "pShift", "e", "renderer", "parser$1", "db", "styles", "cnf"]
}
