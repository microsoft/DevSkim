{
  "version": 3,
  "sources": ["../../node_modules/mermaid/src/diagrams/class/classRenderer-v2.ts", "../../node_modules/mermaid/src/diagrams/class/classDiagram-v2.ts"],
  "sourcesContent": ["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n", "import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],
  "mappings": "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",
  "names": ["sanitizeText", "txt", "common", "getConfig", "conf", "addClasses", "classes", "g", "_id", "diagObj", "keys", "log", "id", "vertex", "cssClassStr", "styles", "vertexText", "radius", "shape", "node", "_a", "_b", "addNotes", "notes", "startEdgeId", "note", "cssNoteStr", "edgeId", "edgeData", "interpolateToCurve", "linear_default", "addRelations", "relations", "cnt", "edge", "getArrowMarker", "getStylesFromArray", "setConf", "cnf", "draw", "text", "_version", "securityLevel", "nodeSpacing", "rankSpacing", "Graph", "sandboxElement", "select_default", "root", "svg", "element", "render", "utils", "setupGraphViewbox$1", "doc", "labels", "label", "dim", "rect", "type", "marker", "renderer", "diagram", "parser$1", "db"]
}
