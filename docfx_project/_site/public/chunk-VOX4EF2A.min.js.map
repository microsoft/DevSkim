{
  "version": 3,
  "sources": ["../../node_modules/@khanacademy/simple-markdown/src/index.js", "../../node_modules/mermaid/src/rendering-util/handle-markdown-text.js", "../../node_modules/mermaid/src/rendering-util/createText.js"],
  "sourcesContent": ["/* eslint-disable prefer-spread, no-regex-spaces, no-unused-vars, guard-for-in, no-console, no-var */\n// @flow\n\n/**\n * Simple-Markdown\n * ===============\n *\n * Simple-Markdown's primary goal is to be easy to adapt. It aims\n * to be compliant with John Gruber's [Markdown Syntax page][1],\n * but compatiblity with other markdown implementations' edge-cases\n * will be sacrificed where it conflicts with simplicity or\n * extensibility.\n *\n * If your goal is to simply embed a standard markdown implementation\n * in your website, simple-markdown is probably not the best library\n * for you (although it should work). But if you have struggled to\n * customize an existing library to meet your needs, simple-markdown\n * might be able to help.\n *\n * Many of the regexes and original logic has been adapted from\n * the wonderful [marked.js](https://github.com/chjj/marked)\n */\n\n// Flow Type Definitions:\n\ntype Capture =\n    | (Array<string> & {index: number})\n    | (Array<string> & {index?: number});\n\ntype Attr = string | number | boolean | null | void;\n\ntype SingleASTNode = {\n    type: string,\n    [string]: any,\n};\n\ntype UnTypedASTNode = {\n    [string]: any,\n};\n\ntype ASTNode = SingleASTNode | Array<SingleASTNode>;\n\ntype State = {\n    key?: string | number | void,\n    inline?: ?boolean,\n    [string]: any,\n};\n\ntype ReactElement = React$Element<any>;\ntype ReactElements = React$Node;\n\ntype MatchFunction = {regex?: RegExp} & ((\n    source: string,\n    state: State,\n    prevCapture: string,\n) => ?Capture);\n\ntype Parser = (source: string, state?: ?State) => Array<SingleASTNode>;\n\ntype ParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode | ASTNode;\n\ntype SingleNodeParseFunction = (\n    capture: Capture,\n    nestedParse: Parser,\n    state: State,\n) => UnTypedASTNode;\n\ntype Output<Result> = (node: ASTNode, state?: ?State) => Result;\n\ntype NodeOutput<Result> = (\n    node: SingleASTNode,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ArrayNodeOutput<Result> = (\n    node: Array<SingleASTNode>,\n    nestedOutput: Output<Result>,\n    state: State,\n) => Result;\n\ntype ReactOutput = Output<ReactElements>;\ntype ReactNodeOutput = NodeOutput<ReactElements>;\ntype HtmlOutput = Output<string>;\ntype HtmlNodeOutput = NodeOutput<string>;\n\ntype ParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: ParseFunction,\n};\n\ntype SingleNodeParserRule = {\n    +order: number,\n    +match: MatchFunction,\n    +quality?: (capture: Capture, state: State, prevCapture: string) => number,\n    +parse: SingleNodeParseFunction,\n};\n\ntype ReactOutputRule = {\n    // we allow null because some rules are never output results, and that's\n    // legal as long as no parsers return an AST node matching that rule.\n    // We don't use ? because this makes it be explicitly defined as either\n    // a valid function or null, so it can't be forgotten.\n    +react: ReactNodeOutput | null,\n};\n\ntype HtmlOutputRule = {\n    +html: HtmlNodeOutput | null,\n};\n\ntype ArrayRule = {\n    +react?: ArrayNodeOutput<ReactElements>,\n    +html?: ArrayNodeOutput<string>,\n    +[string]: ArrayNodeOutput<any>,\n};\n\ntype ParserRules = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule,\n};\n\ntype OutputRules<Rule> = {\n    +Array?: ArrayRule,\n    +[type: string]: Rule,\n};\ntype Rules<OutputRule> = {\n    +Array?: ArrayRule,\n    +[type: string]: ParserRule & OutputRule,\n};\ntype ReactRules = {\n    +Array?: {\n        +react: ArrayNodeOutput<ReactElements>,\n    },\n    +[type: string]: ParserRule & ReactOutputRule,\n};\ntype HtmlRules = {\n    +Array?: {\n        +html: ArrayNodeOutput<string>,\n    },\n    +[type: string]: ParserRule & HtmlOutputRule,\n};\n\n// We want to clarify our defaultRules types a little bit more so clients can\n// reuse defaultRules built-ins. So we make some stronger guarantess when\n// we can:\ntype NonNullReactOutputRule = {\n    +react: ReactNodeOutput,\n};\ntype ElementReactOutputRule = {\n    +react: NodeOutput<ReactElement>,\n};\ntype TextReactOutputRule = {\n    +react: NodeOutput<string>,\n};\ntype NonNullHtmlOutputRule = {\n    +html: HtmlNodeOutput,\n};\n\ntype DefaultInRule = SingleNodeParserRule & ReactOutputRule & HtmlOutputRule;\ntype TextInOutRule = SingleNodeParserRule &\n    TextReactOutputRule &\n    NonNullHtmlOutputRule;\ntype LenientInOutRule = SingleNodeParserRule &\n    NonNullReactOutputRule &\n    NonNullHtmlOutputRule;\ntype DefaultInOutRule = SingleNodeParserRule &\n    ElementReactOutputRule &\n    NonNullHtmlOutputRule;\n\ntype DefaultRules = {\n    +Array: {\n        +react: ArrayNodeOutput<ReactElements>,\n        +html: ArrayNodeOutput<string>,\n    },\n    +heading: DefaultInOutRule,\n    +nptable: DefaultInRule,\n    +lheading: DefaultInRule,\n    +hr: DefaultInOutRule,\n    +codeBlock: DefaultInOutRule,\n    +fence: DefaultInRule,\n    +blockQuote: DefaultInOutRule,\n    +list: DefaultInOutRule,\n    +def: LenientInOutRule,\n    +table: DefaultInOutRule,\n    +tableSeparator: DefaultInRule,\n    +newline: TextInOutRule,\n    +paragraph: DefaultInOutRule,\n    +escape: DefaultInRule,\n    +autolink: DefaultInRule,\n    +mailto: DefaultInRule,\n    +url: DefaultInRule,\n    +link: DefaultInOutRule,\n    +image: DefaultInOutRule,\n    +reflink: DefaultInRule,\n    +refimage: DefaultInRule,\n    +em: DefaultInOutRule,\n    +strong: DefaultInOutRule,\n    +u: DefaultInOutRule,\n    +del: DefaultInOutRule,\n    +inlineCode: DefaultInOutRule,\n    +br: DefaultInOutRule,\n    +text: TextInOutRule,\n};\n\ntype RefNode = {\n    type: string,\n    content?: ASTNode,\n    target?: string,\n    title?: string,\n    alt?: string,\n};\n\n// End Flow Definitions\n\nvar CR_NEWLINE_R = /\\r\\n?/g;\nvar TAB_R = /\\t/g;\nvar FORMFEED_R = /\\f/g;\n\n/**\n * Turn various whitespace into easy-to-process whitespace\n */\nvar preprocess = function (source: string): string {\n    return source\n        .replace(CR_NEWLINE_R, \"\\n\")\n        .replace(FORMFEED_R, \"\")\n        .replace(TAB_R, \"    \");\n};\n\nvar populateInitialState = function (\n    givenState: ?State,\n    defaultState: ?State,\n): State {\n    var state: State = givenState || {};\n    if (defaultState != null) {\n        for (var prop in defaultState) {\n            // $FlowFixMe\n            if (Object.prototype.hasOwnProperty.call(defaultState, prop)) {\n                state[prop] = defaultState[prop];\n            }\n        }\n    }\n    return state;\n};\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @param {SimpleMarkdown.ParserRules} rules\n *     an object containing\n *     rule type -> {match, order, parse} objects\n *     (lower order is higher precedence)\n * @param {SimpleMarkdown.OptionalState} [defaultState]\n *\n * @returns {SimpleMarkdown.Parser}\n *     The resulting parse function, with the following parameters:\n *     @source: the input source string to be parsed\n *     @state: an optional object to be threaded through parse\n *         calls. Allows clients to add stateful operations to\n *         parsing, such as keeping track of how many levels deep\n *         some nesting is. For an example use-case, see passage-ref\n *         parsing in src/widgets/passage/passage-markdown.jsx\n */\nvar parserFor = function (rules: ParserRules, defaultState: ?State): Parser {\n    // Sorts rules in order of increasing order, then\n    // ascending rule name in case of ties.\n    var ruleList = Object.keys(rules).filter(function (type) {\n        var rule = rules[type];\n        if (rule == null || rule.match == null) {\n            return false;\n        }\n        var order = rule.order;\n        if (\n            (typeof order !== \"number\" || !isFinite(order)) &&\n            typeof console !== \"undefined\"\n        ) {\n            console.warn(\n                \"simple-markdown: Invalid order for rule `\" +\n                    type +\n                    \"`: \" +\n                    String(order),\n            );\n        }\n        return true;\n    });\n\n    ruleList.sort(function (typeA, typeB) {\n        var ruleA: ParserRule = (rules[typeA]: any);\n        var ruleB: ParserRule = (rules[typeB]: any);\n        var orderA = ruleA.order;\n        var orderB = ruleB.order;\n\n        // First sort based on increasing order\n        if (orderA !== orderB) {\n            return orderA - orderB;\n        }\n\n        var secondaryOrderA = ruleA.quality ? 0 : 1;\n        var secondaryOrderB = ruleB.quality ? 0 : 1;\n\n        if (secondaryOrderA !== secondaryOrderB) {\n            return secondaryOrderA - secondaryOrderB;\n\n            // Then based on increasing unicode lexicographic ordering\n        } else if (typeA < typeB) {\n            return -1;\n        } else if (typeA > typeB) {\n            return 1;\n        } else {\n            // Rules should never have the same name,\n            // but this is provided for completeness.\n            return 0;\n        }\n    });\n\n    var latestState: State;\n    var nestedParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        var result: Array<SingleASTNode> = [];\n        state = state || latestState;\n        latestState = state;\n        while (source) {\n            // store the best match, it's rule, and quality:\n            var ruleType = null;\n            var rule = null;\n            var capture = null;\n            var quality = NaN;\n\n            // loop control variables:\n            var i = 0;\n            var currRuleType = ruleList[0];\n\n            // $FlowFixMe\n            var currRule: ParserRule = rules[currRuleType];\n\n            do {\n                var currOrder = currRule.order;\n                var prevCaptureStr =\n                    state.prevCapture == null ? \"\" : state.prevCapture[0];\n                var currCapture = currRule.match(source, state, prevCaptureStr);\n\n                if (currCapture) {\n                    var currQuality = currRule.quality\n                        ? currRule.quality(currCapture, state, prevCaptureStr)\n                        : 0;\n                    // This should always be true the first time because\n                    // the initial quality is NaN (that's why there's the\n                    // condition negation).\n                    if (!(currQuality <= quality)) {\n                        ruleType = currRuleType;\n                        rule = currRule;\n                        capture = currCapture;\n                        quality = currQuality;\n                    }\n                }\n\n                // Move on to the next item.\n                // Note that this makes `currRule` be the next item\n                i++;\n                currRuleType = ruleList[i];\n                // $FlowFixMe\n                currRule = rules[currRuleType];\n            } while (\n                // keep looping while we're still within the ruleList\n                currRule &&\n                // if we don't have a match yet, continue\n                (!capture ||\n                    // or if we have a match, but the next rule is\n                    // at the same order, and has a quality measurement\n                    // functions, then this rule must have a quality\n                    // measurement function (since they are sorted before\n                    // those without), and we need to check if there is\n                    // a better quality match\n                    (currRule.order === currOrder && currRule.quality))\n            );\n\n            // TODO(aria): Write tests for these\n            if (rule == null || capture == null) {\n                throw new Error(\n                    \"Could not find a matching rule for the below \" +\n                        \"content. The rule with highest `order` should \" +\n                        \"always match content provided to it. Check \" +\n                        \"the definition of `match` for '\" +\n                        ruleList[ruleList.length - 1] +\n                        \"'. It seems to not match the following source:\\n\" +\n                        source,\n                );\n            }\n            if (capture.index) {\n                // If present and non-zero, i.e. a non-^ regexp result:\n                throw new Error(\n                    \"`match` must return a capture starting at index 0 \" +\n                        \"(the current parse index). Did you forget a ^ at the \" +\n                        \"start of the RegExp?\",\n                );\n            }\n\n            var parsed = rule.parse(capture, nestedParse, state);\n            // We maintain the same object here so that rules can\n            // store references to the objects they return and\n            // modify them later. (oops sorry! but this adds a lot\n            // of power--see reflinks.)\n            if (Array.isArray(parsed)) {\n                // $FlowFixMe\n                Array.prototype.push.apply(result, parsed);\n            } else {\n                if (parsed == null || typeof parsed !== \"object\") {\n                    throw new Error(\n                        `parse() function returned invalid parse result: '${parsed}'`,\n                    );\n                }\n\n                // We also let rules override the default type of\n                // their parsed node if they would like to, so that\n                // there can be a single output function for all links,\n                // even if there are several rules to parse them.\n                if (parsed.type == null) {\n                    // $FlowFixMe\n                    parsed.type = ruleType;\n                }\n                result.push(parsed);\n            }\n\n            state.prevCapture = capture;\n            source = source.substring(state.prevCapture[0].length);\n        }\n\n        // $FlowFixMe\n        return result;\n    };\n\n    var outerParse: Parser = function (\n        source: string,\n        state: ?State,\n    ): Array<SingleASTNode> {\n        latestState = populateInitialState(state, defaultState);\n        if (!latestState.inline && !latestState.disableAutoBlockNewlines) {\n            source = source + \"\\n\\n\";\n        }\n        // We store the previous capture so that match functions can\n        // use some limited amount of lookbehind. Lists use this to\n        // ensure they don't match arbitrary '- ' or '* ' in inline\n        // text (see the list rule for more information). This stores\n        // the full regex capture object, if there is one.\n        latestState.prevCapture = null;\n        return nestedParse(preprocess(source), latestState);\n    };\n\n    // $FlowFixMe\n    return outerParse;\n};\n\n// Creates a match function for an inline scoped element from a regex\nvar inlineRegex = function (regex: RegExp): MatchFunction {\n    var match = function (\n        source: string,\n        state: State,\n        prevCapture: string,\n    ): ?Capture {\n        if (state.inline) {\n            // $FlowFixMe\n            return regex.exec(source);\n        } else {\n            return null;\n        }\n    };\n    match.regex = regex;\n\n    return match;\n};\n\n// Creates a match function for a block scoped element from a regex\nvar blockRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        if (state.inline) {\n            return null;\n        } else {\n            return regex.exec(source);\n        }\n    };\n    match.regex = regex;\n    return match;\n};\n\n// Creates a match function from a regex, ignoring block/inline scope\nvar anyScopeRegex = function (regex: RegExp): MatchFunction {\n    // $FlowFixMe\n    var match: MatchFunction = function (source, state) {\n        return regex.exec(source);\n    };\n    match.regex = regex;\n    return match;\n};\n\nvar TYPE_SYMBOL =\n    (typeof Symbol === \"function\" &&\n        Symbol.for &&\n        Symbol.for(\"react.element\")) ||\n    0xeac7;\n\nvar reactElement = function (\n    type: string,\n    key: string | number | null | void,\n    props: {[string]: any},\n): ReactElement {\n    var element: ReactElement = ({\n        $$typeof: TYPE_SYMBOL,\n        type: type,\n        key: key == null ? undefined : key,\n        ref: null,\n        props: props,\n        _owner: null,\n    }: any);\n    return element;\n};\n\n/** Returns a closed HTML tag.\n * @param {string} tagName - Name of HTML tag (eg. \"em\" or \"a\")\n * @param {string} content - Inner content of tag\n * @param {{ [attr: string]: SimpleMarkdown.Attr }} [attributes] - Optional extra attributes of tag as an object of key-value pairs\n *   eg. { \"href\": \"http://google.com\" }. Falsey attributes are filtered out.\n * @param {boolean} [isClosed] - boolean that controls whether tag is closed or not (eg. img tags).\n *   defaults to true\n */\nvar htmlTag = function (\n    tagName: string,\n    content: string,\n    attributes: ?{[any]: ?Attr},\n    isClosed: ?boolean,\n) {\n    attributes = attributes || {};\n    isClosed = typeof isClosed !== \"undefined\" ? isClosed : true;\n\n    var attributeString = \"\";\n    for (var attr in attributes) {\n        var attribute = attributes[attr];\n        // Removes falsey attributes\n        if (\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(attributes, attr) &&\n            attribute\n        ) {\n            attributeString +=\n                \" \" + sanitizeText(attr) + '=\"' + sanitizeText(attribute) + '\"';\n        }\n    }\n\n    var unclosedTag = \"<\" + tagName + attributeString + \">\";\n\n    if (isClosed) {\n        return unclosedTag + content + \"</\" + tagName + \">\";\n    } else {\n        return unclosedTag;\n    }\n};\n\nvar EMPTY_PROPS = {};\n\n/**\n * @param {string | null | undefined} url - url to sanitize\n * @returns {string | null} - url if safe, or null if a safe url could not be made\n */\nvar sanitizeUrl = function (url: ?string) {\n    if (url == null) {\n        return null;\n    }\n    try {\n        var prot = new URL(url, \"https://localhost\").protocol;\n        if (\n            prot.indexOf(\"javascript:\") === 0 ||\n            prot.indexOf(\"vbscript:\") === 0 ||\n            prot.indexOf(\"data:\") === 0\n        ) {\n            return null;\n        }\n    } catch (e) {\n        // invalid URLs should throw a TypeError\n        // see for instance: `new URL(\"\");`\n        return null;\n    }\n    return url;\n};\n\nvar SANITIZE_TEXT_R = /[<>&\"']/g;\nvar SANITIZE_TEXT_CODES = {\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"/\": \"&#x2F;\",\n    \"`\": \"&#96;\",\n};\n\nvar sanitizeText = function (text: Attr): string {\n    return String(text).replace(SANITIZE_TEXT_R, function (chr) {\n        return SANITIZE_TEXT_CODES[chr];\n    });\n};\n\nvar UNESCAPE_URL_R = /\\\\([^0-9A-Za-z\\s])/g;\n\nvar unescapeUrl = function (rawUrlString: string): string {\n    return rawUrlString.replace(UNESCAPE_URL_R, \"$1\");\n};\n\n/**\n * Parse some content with the parser `parse`, with state.inline\n * set to true. Useful for block elements; not generally necessary\n * to be used by inline elements (where state.inline is already true.\n */\nvar parseInline = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = true;\n    var result = parse(content, state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseBlock = function (\n    parse: Parser,\n    content: string,\n    state: State,\n): ASTNode {\n    var isCurrentlyInline = state.inline || false;\n    state.inline = false;\n    var result = parse(content + \"\\n\\n\", state);\n    state.inline = isCurrentlyInline;\n    return result;\n};\n\nvar parseCaptureInline = function (\n    capture: Capture,\n    parse: Parser,\n    state: State,\n): UnTypedASTNode {\n    return {\n        content: parseInline(parse, capture[1], state),\n    };\n};\n\nvar ignoreCapture = function (): UnTypedASTNode {\n    return {};\n};\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nvar LIST_BULLET = \"(?:[*+-]|\\\\d+\\\\.)\";\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nvar LIST_ITEM_PREFIX = \"( *)(\" + LIST_BULLET + \") +\";\nvar LIST_ITEM_PREFIX_R = new RegExp(\"^\" + LIST_ITEM_PREFIX);\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nvar LIST_ITEM_R = new RegExp(\n    LIST_ITEM_PREFIX +\n        \"[^\\\\n]*(?:\\\\n\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )[^\\\\n]*)*(\\n|$)\",\n    \"gm\",\n);\nvar BLOCK_END_R = /\\n{2,}$/;\nvar INLINE_CODE_ESCAPE_BACKTICKS_R = /^ (?= *`)|(` *) $/g;\n// recognize the end of a paragraph block inside a list item:\n// two or more newlines at end end of the item\nvar LIST_BLOCK_END_R = BLOCK_END_R;\nvar LIST_ITEM_END_R = / *\\n+$/;\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nvar LIST_R = new RegExp(\n    \"^( *)(\" +\n        LIST_BULLET +\n        \") \" +\n        \"[\\\\s\\\\S]+?(?:\\n{2,}(?! )\" +\n        \"(?!\\\\1\" +\n        LIST_BULLET +\n        \" )\\\\n*\" +\n        // the \\\\s*$ here is so that we can parse the inside of nested\n        // lists, where our content might end before we receive two `\\n`s\n        \"|\\\\s*\\n*$)\",\n);\nvar LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\n\nvar TABLES = (function () {\n    // predefine regexes so we don't have to create them inside functions\n    // sure, regex literals should be fast, even inside functions, but they\n    // aren't in all browsers.\n    var TABLE_BLOCK_TRIM = /\\n+/g;\n    var TABLE_ROW_SEPARATOR_TRIM = /^ *\\| *| *\\| *$/g;\n    var TABLE_CELL_END_TRIM = / *$/;\n    var TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n    var TABLE_CENTER_ALIGN = /^ *:-+: *$/;\n    var TABLE_LEFT_ALIGN = /^ *:-+ *$/;\n\n    // TODO: This needs a real type\n    type TableAlignment = any;\n\n    var parseTableAlignCapture = function (\n        alignCapture: string,\n    ): TableAlignment {\n        if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n            return \"right\";\n        } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n            return \"center\";\n        } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n            return \"left\";\n        } else {\n            return null;\n        }\n    };\n\n    var parseTableAlign = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<TableAlignment> {\n        if (trimEndSeparators) {\n            source = source.replace(TABLE_ROW_SEPARATOR_TRIM, \"\");\n        }\n        var alignText = source.trim().split(\"|\");\n        return alignText.map(parseTableAlignCapture);\n    };\n\n    var parseTableRow = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<SingleASTNode>> {\n        var prevInTable = state.inTable;\n        state.inTable = true;\n        var tableRow = parse(source.trim(), state);\n        state.inTable = prevInTable;\n\n        var cells = [[]];\n        tableRow.forEach(function (node, i) {\n            if (node.type === \"tableSeparator\") {\n                // Filter out empty table separators at the start/end:\n                if (\n                    !trimEndSeparators ||\n                    (i !== 0 && i !== tableRow.length - 1)\n                ) {\n                    // Split the current row:\n                    cells.push([]);\n                }\n            } else {\n                if (\n                    node.type === \"text\" &&\n                    (tableRow[i + 1] == null ||\n                        tableRow[i + 1].type === \"tableSeparator\")\n                ) {\n                    node.content = node.content.replace(\n                        TABLE_CELL_END_TRIM,\n                        \"\",\n                    );\n                }\n                cells[cells.length - 1].push(node);\n            }\n        });\n\n        return cells;\n    };\n\n    /**\n     * @param {string} source\n     * @param {SimpleMarkdown.Parser} parse\n     * @param {SimpleMarkdown.State} state\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.ASTNode[][]}\n     */\n    var parseTableCells = function (\n        source: string,\n        parse: Parser,\n        state: State,\n        trimEndSeparators: boolean,\n    ): Array<Array<ASTNode>> {\n        var rowsText = source.trim().split(\"\\n\");\n\n        return rowsText.map(function (rowText) {\n            // $FlowFixMe\n            return parseTableRow(rowText, parse, state, trimEndSeparators);\n        });\n    };\n\n    /**\n     * @param {boolean} trimEndSeparators\n     * @returns {SimpleMarkdown.SingleNodeParseFunction}\n     */\n    var parseTable = function (trimEndSeparators) {\n        return function (capture, parse, state) {\n            state.inline = true;\n            var header = parseTableRow(\n                capture[1],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var align = parseTableAlign(\n                capture[2],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            var cells = parseTableCells(\n                capture[3],\n                parse,\n                state,\n                trimEndSeparators,\n            );\n            state.inline = false;\n\n            return {\n                type: \"table\",\n                header: header,\n                align: align,\n                cells: cells,\n            };\n        };\n    };\n\n    return {\n        parseTable: parseTable(true),\n        parseNpTable: parseTable(false),\n        TABLE_REGEX:\n            /^ *(\\|.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/,\n        NPTABLE_REGEX:\n            /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n    };\n})();\n\nvar LINK_INSIDE = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\";\nvar LINK_HREF_AND_TITLE =\n    \"\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\";\nvar AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\n\nvar parseRef = function (\n    capture: Capture,\n    state: State,\n    refNode: RefNode,\n): RefNode {\n    var ref = (capture[2] || capture[1]).replace(/\\s+/g, \" \").toLowerCase();\n\n    // We store information about previously seen defs on\n    // state._defs (_ to deconflict with client-defined\n    // state). If the def for this reflink/refimage has\n    // already been seen, we can use its target/source\n    // and title here:\n    if (state._defs && state._defs[ref]) {\n        var def = state._defs[ref];\n        // `refNode` can be a link or an image. Both use\n        // target and title properties.\n        refNode.target = def.target;\n        refNode.title = def.title;\n    }\n\n    // In case we haven't seen our def yet (or if someone\n    // overwrites that def later on), we add this node\n    // to the list of ref nodes for that def. Then, when\n    // we find the def, we can modify this link/image AST\n    // node :).\n    // I'm sorry.\n    state._refs = state._refs || {};\n    state._refs[ref] = state._refs[ref] || [];\n    state._refs[ref].push(refNode);\n\n    return refNode;\n};\n\nvar currOrder = 0;\n\nvar defaultRules: DefaultRules = {\n    Array: {\n        react: function (arr, output, state) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++, key++) {\n                // `key` is our numerical `state.key`, which we increment for\n                // every output node, but don't change for joined text nodes.\n                // (i, however, must change for joined text nodes)\n                state.key = \"\" + i;\n\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result.push(output(node, state));\n            }\n\n            state.key = oldKey;\n            return result;\n        },\n        html: function (arr, output, state) {\n            var result = \"\";\n\n            // map output over the ast, except group any text\n            // nodes together into a single string output.\n            for (var i = 0, key = 0; i < arr.length; i++) {\n                var node = arr[i];\n                if (node.type === \"text\") {\n                    node = {type: \"text\", content: node.content};\n                    for (\n                        ;\n                        i + 1 < arr.length && arr[i + 1].type === \"text\";\n                        i++\n                    ) {\n                        node.content += arr[i + 1].content;\n                    }\n                }\n\n                result += output(node, state);\n            }\n            return result;\n        },\n    },\n    heading: {\n        order: currOrder++,\n        match: blockRegex(/^ *(#{1,6})([^\\n]+?)#* *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                level: capture[1].length,\n                content: parseInline(parse, capture[2].trim(), state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"h\" + node.level, state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"h\" + node.level, output(node.content, state));\n        },\n    },\n    nptable: {\n        order: currOrder++,\n        match: blockRegex(TABLES.NPTABLE_REGEX),\n        parse: TABLES.parseNpTable,\n        react: null,\n        html: null,\n    },\n    lheading: {\n        order: currOrder++,\n        match: blockRegex(/^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"heading\",\n                level: capture[2] === \"=\" ? 1 : 2,\n                content: parseInline(parse, capture[1], state),\n            };\n        },\n        react: null,\n        html: null,\n    },\n    hr: {\n        order: currOrder++,\n        match: blockRegex(/^( *[-*_]){3,} *(?:\\n *)+\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"hr\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<hr>\";\n        },\n    },\n    codeBlock: {\n        order: currOrder++,\n        match: blockRegex(/^(?:    [^\\n]+\\n*)+(?:\\n *)+\\n/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^    /gm, \"\").replace(/\\n+$/, \"\");\n            return {\n                lang: undefined,\n                content: content,\n            };\n        },\n        react: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            return reactElement(\"pre\", state.key, {\n                children: reactElement(\"code\", null, {\n                    className: className,\n                    children: node.content,\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var className = node.lang\n                ? \"markdown-code-\" + node.lang\n                : undefined;\n\n            var codeBlock = htmlTag(\"code\", sanitizeText(node.content), {\n                class: className,\n            });\n            return htmlTag(\"pre\", codeBlock);\n        },\n    },\n    fence: {\n        order: currOrder++,\n        match: blockRegex(\n            /^ *(`{3,}|~{3,}) *(?:(\\S+) *)?\\n([\\s\\S]+?)\\n?\\1 *(?:\\n *)+\\n/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"codeBlock\",\n                lang: capture[2] || undefined,\n                content: capture[3],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    blockQuote: {\n        order: currOrder++,\n        match: blockRegex(/^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/),\n        parse: function (capture, parse, state) {\n            var content = capture[0].replace(/^ *> ?/gm, \"\");\n            return {\n                content: parse(content, state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"blockquote\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"blockquote\", output(node.content, state));\n        },\n    },\n    list: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            // We only want to break into a list if we are at the start of a\n            // line. This is to avoid parsing \"hi * there\" with \"* there\"\n            // becoming a part of a list.\n            // You might wonder, \"but that's inline, so of course it wouldn't\n            // start a list?\". You would be correct! Except that some of our\n            // lists can be inline, because they might be inside another list,\n            // in which case we can parse with inline scope, but need to allow\n            // nested lists inside this inline scope.\n            var prevCaptureStr =\n                state.prevCapture == null ? \"\" : state.prevCapture[0];\n            var isStartOfLineCapture = LIST_LOOKBEHIND_R.exec(prevCaptureStr);\n            var isListBlock = state._list || !state.inline;\n\n            if (isStartOfLineCapture && isListBlock) {\n                source = isStartOfLineCapture[1] + source;\n                return LIST_R.exec(source);\n            } else {\n                return null;\n            }\n        },\n        parse: function (capture, parse, state) {\n            var bullet = capture[2];\n            var ordered = bullet.length > 1;\n            var start = ordered ? +bullet : undefined;\n            var items: Array<string> = capture[0]\n                .replace(LIST_BLOCK_END_R, \"\\n\")\n                .match(LIST_ITEM_R);\n\n            // We know this will match here, because of how the regexes are\n            // defined\n\n            var lastItemWasAParagraph = false;\n            var itemContent = items.map(function (item: string, i: number) {\n                // We need to see how far indented this item is:\n                var prefixCapture = LIST_ITEM_PREFIX_R.exec(item);\n                var space = prefixCapture ? prefixCapture[0].length : 0;\n                // And then we construct a regex to \"unindent\" the subsequent\n                // lines of the items by that amount:\n                var spaceRegex = new RegExp(\"^ {1,\" + space + \"}\", \"gm\");\n\n                // Before processing the item, we need a couple things\n                var content = item\n                    // remove indents on trailing lines:\n                    .replace(spaceRegex, \"\")\n                    // remove the bullet:\n                    .replace(LIST_ITEM_PREFIX_R, \"\");\n\n                // I'm not sur4 why this is necessary again?\n\n                // Handling \"loose\" lists, like:\n                //\n                //  * this is wrapped in a paragraph\n                //\n                //  * as is this\n                //\n                //  * as is this\n                var isLastItem = i === items.length - 1;\n                var containsBlocks = content.indexOf(\"\\n\\n\") !== -1;\n\n                // Any element in a list is a block if it contains multiple\n                // newlines. The last element in the list can also be a block\n                // if the previous item in the list was a block (this is\n                // because non-last items in the list can end with \\n\\n, but\n                // the last item can't, so we just \"inherit\" this property\n                // from our previous element).\n                var thisItemIsAParagraph =\n                    containsBlocks || (isLastItem && lastItemWasAParagraph);\n                lastItemWasAParagraph = thisItemIsAParagraph;\n\n                // backup our state for restoration afterwards. We're going to\n                // want to set state._list to true, and state.inline depending\n                // on our list's looseness.\n                var oldStateInline = state.inline;\n                var oldStateList = state._list;\n                state._list = true;\n\n                // Parse inline if we're in a tight list, or block if we're in\n                // a loose list.\n                var adjustedContent;\n                if (thisItemIsAParagraph) {\n                    state.inline = false;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\\n\\n\");\n                } else {\n                    state.inline = true;\n                    adjustedContent = content.replace(LIST_ITEM_END_R, \"\");\n                }\n\n                var result = parse(adjustedContent, state);\n\n                // Restore our state before returning\n                state.inline = oldStateInline;\n                state._list = oldStateList;\n                return result;\n            });\n\n            return {\n                ordered: ordered,\n                start: start,\n                items: itemContent,\n            };\n        },\n        react: function (node, output, state) {\n            var ListWrapper = node.ordered ? \"ol\" : \"ul\";\n\n            return reactElement(ListWrapper, state.key, {\n                start: node.start,\n                children: node.items.map(function (item: ASTNode, i: number) {\n                    return reactElement(\"li\", \"\" + i, {\n                        children: output(item, state),\n                    });\n                }),\n            });\n        },\n        html: function (node, output, state) {\n            var listItems = node.items\n                .map(function (item: ASTNode) {\n                    return htmlTag(\"li\", output(item, state));\n                })\n                .join(\"\");\n\n            var listTag = node.ordered ? \"ol\" : \"ul\";\n            var attributes = {\n                start: node.start,\n            };\n            return htmlTag(listTag, listItems, attributes);\n        },\n    },\n    def: {\n        order: currOrder++,\n        // TODO(aria): This will match without a blank line before the next\n        // block element, which is inconsistent with most of the rest of\n        // simple-markdown.\n        match: blockRegex(\n            /^ *\\[([^\\]]+)\\]: *<?([^\\s>]*)>?(?: +[\"(]([^\\n]+)[\")])? *\\n(?: *\\n)*/,\n        ),\n        parse: function (capture, parse, state) {\n            var def = capture[1].replace(/\\s+/g, \" \").toLowerCase();\n            var target = capture[2];\n            var title = capture[3];\n\n            // Look for previous links/images using this def\n            // If any links/images using this def have already been declared,\n            // they will have added themselves to the state._refs[def] list\n            // (_ to deconflict with client-defined state). We look through\n            // that list of reflinks for this def, and modify those AST nodes\n            // with our newly found information now.\n            // Sorry :(.\n            if (state._refs && state._refs[def]) {\n                // `refNode` can be a link or an image\n                state._refs[def].forEach(function (refNode: RefNode) {\n                    refNode.target = target;\n                    refNode.title = title;\n                });\n            }\n\n            // Add this def to our map of defs for any future links/images\n            // In case we haven't found any or all of the refs referring to\n            // this def yet, we add our def to the table of known defs, so\n            // that future reflinks can modify themselves appropriately with\n            // this information.\n            state._defs = state._defs || {};\n            state._defs[def] = {\n                target: target,\n                title: title,\n            };\n\n            // return the relevant parsed information\n            // for debugging only.\n            return {\n                def: def,\n                target: target,\n                title: title,\n            };\n        },\n        react: function () {\n            return null;\n        },\n        html: function () {\n            return \"\";\n        },\n    },\n    table: {\n        order: currOrder++,\n        match: blockRegex(TABLES.TABLE_REGEX),\n        parse: TABLES.parseTable,\n        react: function (node, output, state) {\n            var getStyle = function (colIndex: number): {\n                [attr: string]: Attr,\n            } {\n                return node.align[colIndex] == null\n                    ? {}\n                    : {\n                          textAlign: node.align[colIndex],\n                      };\n            };\n\n            var headers = node.header.map(function (\n                content: ASTNode,\n                i: number,\n            ) {\n                return reactElement(\"th\", \"\" + i, {\n                    style: getStyle(i),\n                    scope: \"col\",\n                    children: output(content, state),\n                });\n            });\n\n            var rows = node.cells.map(function (\n                row: Array<ASTNode>,\n                r: number,\n            ) {\n                return reactElement(\"tr\", \"\" + r, {\n                    children: row.map(function (content: ASTNode, c: number) {\n                        return reactElement(\"td\", \"\" + c, {\n                            style: getStyle(c),\n                            children: output(content, state),\n                        });\n                    }),\n                });\n            });\n\n            return reactElement(\"table\", state.key, {\n                children: [\n                    reactElement(\"thead\", \"thead\", {\n                        children: reactElement(\"tr\", null, {\n                            children: headers,\n                        }),\n                    }),\n                    reactElement(\"tbody\", \"tbody\", {\n                        children: rows,\n                    }),\n                ],\n            });\n        },\n        html: function (node, output, state) {\n            var getStyle = function (colIndex: number): string {\n                return node.align[colIndex] == null\n                    ? \"\"\n                    : \"text-align:\" + node.align[colIndex] + \";\";\n            };\n\n            var headers = node.header\n                .map(function (content: ASTNode, i: number) {\n                    return htmlTag(\"th\", output(content, state), {\n                        style: getStyle(i),\n                        scope: \"col\",\n                    });\n                })\n                .join(\"\");\n\n            var rows = node.cells\n                .map(function (row: Array<ASTNode>) {\n                    var cols = row\n                        .map(function (content: ASTNode, c: number) {\n                            return htmlTag(\"td\", output(content, state), {\n                                style: getStyle(c),\n                            });\n                        })\n                        .join(\"\");\n\n                    return htmlTag(\"tr\", cols);\n                })\n                .join(\"\");\n\n            var thead = htmlTag(\"thead\", htmlTag(\"tr\", headers));\n            var tbody = htmlTag(\"tbody\", rows);\n\n            return htmlTag(\"table\", thead + tbody);\n        },\n    },\n    newline: {\n        order: currOrder++,\n        match: blockRegex(/^(?:\\n *)*\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return \"\\n\";\n        },\n        html: function (node, output, state) {\n            return \"\\n\";\n        },\n    },\n    paragraph: {\n        order: currOrder++,\n        match: blockRegex(/^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"div\", state.key, {\n                className: \"paragraph\",\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                class: \"paragraph\",\n            };\n            return htmlTag(\"div\", output(node.content, state), attributes);\n        },\n    },\n    escape: {\n        order: currOrder++,\n        // We don't allow escaping numbers, letters, or spaces here so that\n        // backslashes used in plain text still get rendered. But allowing\n        // escaping anything else provides a very flexible escape mechanism,\n        // regardless of how this grammar is extended.\n        match: inlineRegex(/^\\\\([^0-9A-Za-z\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"text\",\n                content: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    tableSeparator: {\n        order: currOrder++,\n        // $FlowFixMe\n        match: function (source, state) {\n            if (!state.inTable) {\n                return null;\n            }\n            return /^ *\\| */.exec(source);\n        },\n        parse: function () {\n            return {type: \"tableSeparator\"};\n        },\n        // These shouldn't be reached, but in case they are, be reasonable:\n        react: function () {\n            return \" | \";\n        },\n        html: function () {\n            return \" &vert; \";\n        },\n    },\n    autolink: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^: >]+:\\/[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n            };\n        },\n        react: null,\n        html: null,\n    },\n    mailto: {\n        order: currOrder++,\n        match: inlineRegex(/^<([^ >]+@[^ >]+)>/),\n        parse: function (capture, parse, state) {\n            var address = capture[1];\n            var target = capture[1];\n\n            // Check for a `mailto:` already existing in the link:\n            if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n                target = \"mailto:\" + target;\n            }\n\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: address,\n                    },\n                ],\n                target: target,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    url: {\n        order: currOrder++,\n        match: inlineRegex(/^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/),\n        parse: function (capture, parse, state) {\n            return {\n                type: \"link\",\n                content: [\n                    {\n                        type: \"text\",\n                        content: capture[1],\n                    },\n                ],\n                target: capture[1],\n                title: undefined,\n            };\n        },\n        react: null,\n        html: null,\n    },\n    link: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^\\\\[(\" + LINK_INSIDE + \")\\\\]\\\\(\" + LINK_HREF_AND_TITLE + \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var link = {\n                content: parse(capture[1], state),\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return link;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"a\", state.key, {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                href: sanitizeUrl(node.target),\n                title: node.title,\n            };\n\n            return htmlTag(\"a\", output(node.content, state), attributes);\n        },\n    },\n    image: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\\\\(\" +\n                    LINK_HREF_AND_TITLE +\n                    \"\\\\)\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            var image = {\n                alt: capture[1],\n                target: unescapeUrl(capture[2]),\n                title: capture[3],\n            };\n            return image;\n        },\n        react: function (node, output, state) {\n            return reactElement(\"img\", state.key, {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            });\n        },\n        html: function (node, output, state) {\n            var attributes = {\n                src: sanitizeUrl(node.target),\n                alt: node.alt,\n                title: node.title,\n            };\n\n            return htmlTag(\"img\", \"\", attributes, false);\n        },\n    },\n    reflink: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"link\",\n                content: parse(capture[1], state),\n            });\n        },\n        react: null,\n        html: null,\n    },\n    refimage: {\n        order: currOrder++,\n        match: inlineRegex(\n            new RegExp(\n                // The first [part] of the link\n                \"^!\\\\[(\" +\n                    LINK_INSIDE +\n                    \")\\\\]\" +\n                    // The [ref] target of the link\n                    \"\\\\s*\\\\[([^\\\\]]*)\\\\]\",\n            ),\n        ),\n        parse: function (capture, parse, state) {\n            return parseRef(capture, state, {\n                type: \"image\",\n                alt: capture[1],\n            });\n        },\n        react: null,\n        html: null,\n    },\n    em: {\n        order: currOrder /* same as strong/u */,\n        match: inlineRegex(\n            new RegExp(\n                // only match _s surrounding words.\n                \"^\\\\b_\" +\n                    \"((?:__|\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\_])+?)_\" +\n                    \"\\\\b\" +\n                    // Or match *s:\n                    \"|\" +\n                    // Only match *s that are followed by a non-space:\n                    \"^\\\\*(?=\\\\S)(\" +\n                    // Match at least one of:\n                    \"(?:\" +\n                    //  - `**`: so that bolds inside italics don't close the\n                    //          italics\n                    \"\\\\*\\\\*|\" +\n                    //  - escape sequence: so escaped *s don't close us\n                    \"\\\\\\\\[\\\\s\\\\S]|\" +\n                    //  - whitespace: followed by a non-* (we don't\n                    //          want ' *' to close an italics--it might\n                    //          start a list)\n                    \"\\\\s+(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\s\\\\*\\\\\\\\]|\\\\*\\\\*)|\" +\n                    //  - non-whitespace, non-*, non-backslash characters\n                    \"[^\\\\s\\\\*\\\\\\\\]\" +\n                    \")+?\" +\n                    // followed by a non-space, non-* then *\n                    \")\\\\*(?!\\\\*)\",\n            ),\n        ),\n        quality: function (capture) {\n            // precedence by length, `em` wins ties:\n            return capture[0].length + 0.2;\n        },\n        parse: function (capture, parse, state) {\n            return {\n                content: parse(capture[2] || capture[1], state),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"em\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"em\", output(node.content, state));\n        },\n    },\n    strong: {\n        order: currOrder /* same as em */,\n        match: inlineRegex(/^\\*\\*((?:\\\\[\\s\\S]|[^\\\\])+?)\\*\\*(?!\\*)/),\n        quality: function (capture) {\n            // precedence by length, wins ties vs `u`:\n            return capture[0].length + 0.1;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"strong\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"strong\", output(node.content, state));\n        },\n    },\n    u: {\n        order: currOrder++ /* same as em&strong; increment for next rule */,\n        match: inlineRegex(/^__((?:\\\\[\\s\\S]|[^\\\\])+?)__(?!_)/),\n        quality: function (capture) {\n            // precedence by length, loses all ties\n            return capture[0].length;\n        },\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"u\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"u\", output(node.content, state));\n        },\n    },\n    del: {\n        order: currOrder++,\n        match: inlineRegex(\n            /^~~(?=\\S)((?:\\\\[\\s\\S]|~(?!~)|[^\\s~\\\\]|\\s(?!~~))+?)~~/,\n        ),\n        parse: parseCaptureInline,\n        react: function (node, output, state) {\n            return reactElement(\"del\", state.key, {\n                children: output(node.content, state),\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"del\", output(node.content, state));\n        },\n    },\n    inlineCode: {\n        order: currOrder++,\n        match: inlineRegex(/^(`+)([\\s\\S]*?[^`])\\1(?!`)/),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[2].replace(\n                    INLINE_CODE_ESCAPE_BACKTICKS_R,\n                    \"$1\",\n                ),\n            };\n        },\n        react: function (node, output, state) {\n            return reactElement(\"code\", state.key, {\n                children: node.content,\n            });\n        },\n        html: function (node, output, state) {\n            return htmlTag(\"code\", sanitizeText(node.content));\n        },\n    },\n    br: {\n        order: currOrder++,\n        match: anyScopeRegex(/^ {2,}\\n/),\n        parse: ignoreCapture,\n        react: function (node, output, state) {\n            return reactElement(\"br\", state.key, EMPTY_PROPS);\n        },\n        html: function (node, output, state) {\n            return \"<br>\";\n        },\n    },\n    text: {\n        order: currOrder++,\n        // Here we look for anything followed by non-symbols,\n        // double newlines, or double-space-newlines\n        // We break on any symbol characters so that this grammar\n        // is easy to extend without needing to modify this regex\n        match: anyScopeRegex(\n            /^[\\s\\S]+?(?=[^0-9A-Za-z\\s\\u00c0-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|$)/,\n        ),\n        parse: function (capture, parse, state) {\n            return {\n                content: capture[0],\n            };\n        },\n        react: function (node, output, state) {\n            return node.content;\n        },\n        html: function (node, output, state) {\n            return sanitizeText(node.content);\n        },\n    },\n};\n\n/** (deprecated) */\nvar ruleOutput = function (\n    // $FlowFixMe\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n) {\n    if (!property && typeof console !== \"undefined\") {\n        console.warn(\n            \"simple-markdown ruleOutput should take 'react' or \" +\n                \"'html' as the second argument.\",\n        );\n    }\n\n    var nestedRuleOutput = function (\n        ast: SingleASTNode,\n        outputFunc: Output<any>,\n        state: State,\n    ) {\n        return rules[ast.type][property](ast, outputFunc, state);\n    };\n    return nestedRuleOutput;\n};\n\n/** (deprecated)\n */\nvar reactFor = function (outputFunc: ReactNodeOutput): ReactOutput {\n    var nestedOutput: ReactOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            var oldKey = state.key;\n            var result: Array<ReactElements> = [];\n\n            // map nestedOutput over the ast, except group any text\n            // nodes together into a single string output.\n            var lastResult = null;\n            for (var i = 0; i < ast.length; i++) {\n                state.key = \"\" + i;\n                var nodeOut = nestedOutput(ast[i], state);\n                if (\n                    typeof nodeOut === \"string\" &&\n                    typeof lastResult === \"string\"\n                ) {\n                    lastResult = lastResult + nodeOut;\n                    result[result.length - 1] = lastResult;\n                } else {\n                    result.push(nodeOut);\n                    lastResult = nodeOut;\n                }\n            }\n\n            state.key = oldKey;\n            return result;\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\n/** (deprecated)\n */\nvar htmlFor = function (outputFunc: HtmlNodeOutput): HtmlOutput {\n    var nestedOutput: HtmlOutput = function (ast, state) {\n        state = state || {};\n        if (Array.isArray(ast)) {\n            return ast\n                .map(function (node) {\n                    return nestedOutput(node, state);\n                })\n                .join(\"\");\n        } else {\n            return outputFunc(ast, nestedOutput, state);\n        }\n    };\n    return nestedOutput;\n};\n\nvar outputFor = function (\n    rules: OutputRules<Rule>,\n    property: $Keys<Rule>,\n    defaultState: ?State = {},\n) {\n    if (!property) {\n        throw new Error(\n            \"simple-markdown: outputFor: `property` must be \" +\n                \"defined. \" +\n                \"if you just upgraded, you probably need to replace `outputFor` \" +\n                \"with `reactFor`\",\n        );\n    }\n\n    var latestState: State;\n    // $FlowFixMe[incompatible-type]\n    var arrayRule: ArrayRule = rules.Array || defaultRules.Array;\n\n    // Tricks to convince tsc that this var is not null:\n    var arrayRuleCheck = arrayRule[property];\n    if (!arrayRuleCheck) {\n        throw new Error(\n            \"simple-markdown: outputFor: to join nodes of type `\" +\n                property +\n                \"` you must provide an `Array:` joiner rule with that type, \" +\n                \"Please see the docs for details on specifying an Array rule.\",\n        );\n    }\n    var arrayRuleOutput = arrayRuleCheck;\n\n    var nestedOutput: Output<any> = function (ast, state) {\n        state = state || latestState;\n        latestState = state;\n        if (Array.isArray(ast)) {\n            return arrayRuleOutput(ast, nestedOutput, state);\n        } else {\n            return rules[ast.type][property](ast, nestedOutput, state);\n        }\n    };\n\n    var outerOutput: Output<any> = function (ast, state) {\n        latestState = populateInitialState(state, defaultState);\n        return nestedOutput(ast, latestState);\n    };\n    return outerOutput;\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultRawParse = parserFor(defaultRules);\n\nvar defaultBlockParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = false;\n    return defaultRawParse(source, state);\n};\n\nvar defaultInlineParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    state = state || {};\n    state.inline = true;\n    return defaultRawParse(source, state);\n};\n\nvar defaultImplicitParse = function (\n    source: string,\n    state: ?State,\n): Array<SingleASTNode> {\n    var isBlock = BLOCK_END_R.test(source);\n    state = state || {};\n    state.inline = !isBlock;\n    return defaultRawParse(source, state);\n};\n\n// $FlowFixMe[incompatible-call]\nvar defaultReactOutput: ReactOutput = outputFor(defaultRules, \"react\");\n// $FlowFixMe[incompatible-call]\nvar defaultHtmlOutput: HtmlOutput = outputFor(defaultRules, \"html\");\n\nvar markdownToReact = function (source: string, state: ?State): ReactElements {\n    return defaultReactOutput(defaultBlockParse(source, state), state);\n};\n\nvar markdownToHtml = function (source: string, state: ?State): string {\n    return defaultHtmlOutput(defaultBlockParse(source, state), state);\n};\n\n// TODO: This needs definition\ntype ReactMarkdownProps = any;\nvar ReactMarkdown = function (props: ReactMarkdownProps): ReactElement {\n    var divProps = {};\n\n    for (var prop in props) {\n        if (\n            prop !== \"source\" &&\n            // $FlowFixMe\n            Object.prototype.hasOwnProperty.call(props, prop)\n        ) {\n            divProps[prop] = props[prop];\n        }\n    }\n    divProps.children = markdownToReact(props.source);\n\n    return reactElement(\"div\", null, divProps);\n};\n\ntype Exports = {\n    +defaultRules: DefaultRules,\n    +parserFor: (rules: ParserRules, defaultState?: ?State) => Parser,\n    +outputFor: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n        defaultState?: ?State,\n    ) => Output<any>,\n\n    +ruleOutput: <Rule: Object>(\n        rules: OutputRules<Rule>,\n        param: $Keys<Rule>,\n    ) => NodeOutput<any>,\n    +reactFor: (ReactNodeOutput) => ReactOutput,\n    +htmlFor: (HtmlNodeOutput) => HtmlOutput,\n\n    +inlineRegex: (regex: RegExp) => MatchFunction,\n    +blockRegex: (regex: RegExp) => MatchFunction,\n    +anyScopeRegex: (regex: RegExp) => MatchFunction,\n    +parseInline: (parse: Parser, content: string, state: State) => ASTNode,\n    +parseBlock: (parse: Parser, content: string, state: State) => ASTNode,\n\n    +markdownToReact: (source: string, state?: ?State) => ReactElements,\n    +markdownToHtml: (source: string, state?: ?State) => string,\n    +ReactMarkdown: (props: {source: string, [string]: any}) => ReactElement,\n\n    +defaultRawParse: (source: string, state?: ?State) => Array<SingleASTNode>,\n    +defaultBlockParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultInlineParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n    +defaultImplicitParse: (\n        source: string,\n        state?: ?State,\n    ) => Array<SingleASTNode>,\n\n    +defaultReactOutput: ReactOutput,\n    +defaultHtmlOutput: HtmlOutput,\n\n    +preprocess: (source: string) => string,\n    +sanitizeText: (text: Attr) => string,\n    +sanitizeUrl: (url: ?string) => ?string,\n    +unescapeUrl: (url: string) => string,\n    +htmlTag: (\n        tagName: string,\n        content: string,\n        attributes: ?{[any]: ?Attr},\n        isClosed: ?boolean,\n    ) => string,\n    +reactElement: (\n        type: string,\n        key: string | null,\n        props: {[string]: any},\n    ) => ReactElement,\n};\n\nexport type {\n    // Hopefully you shouldn't have to use these, but they're here if you need!\n    // Top-level API:\n    State,\n    Parser,\n    Output,\n    ReactOutput,\n    HtmlOutput,\n    // Most of the following types should be considered experimental and\n    // subject to change or change names. Again, they shouldn't be necessary,\n    // but if they are I'd love to hear how so I can better support them!\n\n    // Individual Rule fields:\n    Capture,\n    MatchFunction,\n    ParseFunction,\n    NodeOutput,\n    ArrayNodeOutput,\n    ReactNodeOutput,\n    // Single rules:\n    ParserRule,\n    ReactOutputRule,\n    HtmlOutputRule,\n    // Sets of rules:\n    ParserRules,\n    OutputRules,\n    Rules,\n    ReactRules,\n    HtmlRules,\n    SingleASTNode,\n};\n\n// $FlowFixMe\nvar SimpleMarkdown: Exports = {\n    defaultRules: defaultRules,\n    parserFor: parserFor,\n    outputFor: outputFor,\n\n    inlineRegex: inlineRegex,\n    blockRegex: blockRegex,\n    anyScopeRegex: anyScopeRegex,\n    parseInline: parseInline,\n    parseBlock: parseBlock,\n\n    // default wrappers:\n    markdownToReact: markdownToReact,\n    markdownToHtml: markdownToHtml,\n    ReactMarkdown: ReactMarkdown,\n\n    defaultBlockParse: defaultBlockParse,\n    defaultInlineParse: defaultInlineParse,\n    defaultImplicitParse: defaultImplicitParse,\n\n    defaultReactOutput: defaultReactOutput,\n    defaultHtmlOutput: defaultHtmlOutput,\n\n    preprocess: preprocess,\n    sanitizeText: sanitizeText,\n    sanitizeUrl: sanitizeUrl,\n    unescapeUrl: unescapeUrl,\n    htmlTag: htmlTag,\n    reactElement: reactElement,\n\n    // deprecated:\n    defaultRawParse: defaultRawParse,\n    ruleOutput: ruleOutput,\n    reactFor: reactFor,\n    htmlFor: htmlFor,\n\n    defaultParse: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultParse is deprecated, please use `defaultImplicitParse`\",\n            );\n        }\n        return defaultImplicitParse.apply(null, (arguments: any));\n    },\n    defaultOutput: function () {\n        if (typeof console !== \"undefined\") {\n            console.warn(\n                \"defaultOutput is deprecated, please use `defaultReactOutput`\",\n            );\n        }\n        return defaultReactOutput.apply(null, (arguments: any));\n    },\n};\n\nexport default SimpleMarkdown;\n", "import SimpleMarkdown from '@khanacademy/simple-markdown';\n\n/**\n *\n * @param markdown\n */\nfunction preprocessMarkdown(markdown) {\n  // Replace multiple newlines with a single newline\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, '\\n');\n  // Remove extra spaces at the beginning of each line\n  const withoutExtraSpaces = withoutMultipleNewlines.replace(/^\\s+/gm, '');\n  return withoutExtraSpaces;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(preprocessedMarkdown);\n\n  let lines = [[]];\n  let currentLine = 0;\n\n  /**\n   *\n   * @param node\n   * @param parentType\n   */\n  function processNode(node, parentType) {\n    if (node.type === 'text') {\n      const textLines = node.content.split('\\n');\n\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n\n        // textLine.split(/ (?=[^!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]+)/).forEach((word) => {\n        textLine.split(' ').forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType || 'normal' });\n          }\n        });\n      });\n    } else if (node.type === 'strong' || node.type === 'em') {\n      node.content.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n\n  syntaxTree.forEach((treeNode) => {\n    if (treeNode.type === 'paragraph') {\n      treeNode.content.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n\n  return lines;\n}\n\n/**\n *\n * @param markdown\n */\nexport function markdownToHTML(markdown) {\n  const mdParse = SimpleMarkdown.defaultBlockParse;\n  const syntaxTree = mdParse(markdown);\n\n  /**\n   *\n   * @param node\n   */\n  function output(node) {\n    if (node.type === 'text') {\n      return node.content.replace(/\\n/g, '<br/>');\n    } else if (node.type === 'strong') {\n      return `<strong>${node.content.map(output).join('')}</strong>`;\n    } else if (node.type === 'em') {\n      return `<em>${node.content.map(output).join('')}</em>`;\n    } else if (node.type === 'paragraph') {\n      return `<p>${node.content.map(output).join('')}</p>`;\n    } else {\n      return '';\n    }\n  }\n\n  return syntaxTree.map(output).join('');\n}\n", "import { select } from 'd3';\nimport { log } from '../logger';\nimport { getConfig } from '../config';\nimport { evaluate } from '../diagrams/common/common';\nimport { decodeEntities } from '../mermaidAPI';\nimport { markdownToHTML, markdownToLines } from '../rendering-util/handle-markdown-text';\n/**\n * @param dom\n * @param styleFn\n */\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\n/**\n * @param element\n * @param {any} node\n * @param width\n * @param classes\n * @returns {SVGForeignObjectElement} Node\n */\nfunction addHtmlSpan(element, node, width, classes) {\n  const fo = element.append('foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  // const newEl = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  const div = fo.append('xhtml:div');\n  // const div = body.append('div');\n  // const div = fo.append('div');\n\n  const label = node.label;\n  const labelClass = node.isNode ? 'nodeLabel' : 'edgeLabel';\n  div.html(\n    `<span class=\"${labelClass} ${classes}\" ` +\n      (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : '') +\n      '>' +\n      label +\n      '</span>'\n  );\n\n  applyStyle(div, node.labelStyle);\n  div.style('display', 'table-cell');\n  div.style('white-space', 'nowrap');\n  div.style('max-width', width + 'px');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style('display', 'table');\n    div.style('white-space', 'break-spaces');\n    div.style('width', width + 'px');\n    bbox = div.node().getBoundingClientRect();\n  }\n\n  fo.style('width', bbox.width);\n  fo.style('height', bbox.height);\n\n  return fo.node();\n}\n\n/**\n * Creates a tspan element with the specified attributes for text positioning.\n *\n * @param {object} textElement - The parent text element to append the tspan element.\n * @param {number} lineIndex - The index of the current line in the structuredText array.\n * @param {number} lineHeight - The line height value for the text.\n * @returns {object} The created tspan element.\n */\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement\n    .append('tspan')\n    .attr('class', 'text-outer-tspan')\n    .attr('x', 0)\n    .attr('y', lineIndex * lineHeight - 0.1 + 'em')\n    .attr('dy', lineHeight + 'em');\n}\n\n/**\n * Creates a formatted text element by breaking lines and applying styles based on\n * the given structuredText.\n *\n * @param {number} width - The maximum allowed width of the text.\n * @param {object} g - The parent group element to append the formatted text.\n * @param {Array} structuredText - The structured text data to format.\n * @param addBackground\n */\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append('g');\n  let bkg = labelGroup.insert('rect').attr('class', 'background');\n  const textElement = labelGroup.append('text').attr('y', '-10.1');\n  // .attr('dominant-baseline', 'middle')\n  // .attr('text-anchor', 'middle');\n  // .attr('text-anchor', 'middle');\n  let lineIndex = -1;\n  structuredText.forEach((line) => {\n    lineIndex++;\n    let tspan = createTspan(textElement, lineIndex, lineHeight);\n\n    let words = [...line].reverse();\n    let currentWord;\n    let wrappedLine = [];\n\n    while (words.length) {\n      currentWord = words.pop();\n      wrappedLine.push(currentWord);\n\n      updateTextContentAndStyles(tspan, wrappedLine);\n\n      if (tspan.node().getComputedTextLength() > width) {\n        wrappedLine.pop();\n        words.push(currentWord);\n\n        updateTextContentAndStyles(tspan, wrappedLine);\n\n        wrappedLine = [];\n        lineIndex++;\n        tspan = createTspan(textElement, lineIndex, lineHeight);\n      }\n    }\n  });\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg\n      .attr('x', -padding)\n      .attr('y', -padding)\n      .attr('width', bbox.width + 2 * padding)\n      .attr('height', bbox.height + 2 * padding);\n    // .style('fill', 'red');\n\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\n\n/**\n * Updates the text content and styles of the given tspan element based on the\n * provided wrappedLine data.\n *\n * @param {object} tspan - The tspan element to update.\n * @param {Array} wrappedLine - The line data to apply to the tspan element.\n */\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text('');\n\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan\n      .append('tspan')\n      .attr('font-style', word.type === 'em' ? 'italic' : 'normal')\n      .attr('class', 'text-inner-tspan')\n      .attr('font-weight', word.type === 'strong' ? 'bold' : 'normal');\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(' ' + word.content);\n    }\n  });\n}\n\n/**\n *\n * @param el\n * @param {*} text\n * @param {*} param1\n * @param root0\n * @param root0.style\n * @param root0.isTitle\n * @param root0.classes\n * @param root0.useHtmlLabels\n * @param root0.isNode\n * @returns\n */\n// Note when using from flowcharts converting the API isNode means classes should be set accordingly. When using htmlLabels => to sett classes to'nodeLabel' when isNode=true otherwise 'edgeLabel'\n// When not using htmlLabels => to set classes to 'title-row' when isTitle=true otherwise 'title-row'\nexport const createText = (\n  el,\n  text = '',\n  {\n    style = '',\n    isTitle = false,\n    classes = '',\n    useHtmlLabels = true,\n    isNode = true,\n    width,\n    addSvgBackground = false,\n  } = {}\n) => {\n  log.info('createText', text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n    // text = text.replace(/\\\\n|\\n/g, '<br />');\n    const htmlText = markdownToHTML(text);\n    // log.info('markdo  wnToHTML' + text, markdownToHTML(text));\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        (s) => `<i class='${s.replace(':', ' ')}'></i>`\n      ),\n      labelStyle: style.replace('fill:', 'color:'),\n    };\n    let vertexNode = addHtmlSpan(el, node, width, classes);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const special = ['\"', \"'\", '.', ',', ':', ';', '!', '?', '(', ')', '[', ']', '{', '}'];\n    let lastWord;\n    structuredText.forEach((line) => {\n      line.forEach((word) => {\n        if (special.includes(word.content) && lastWord) {\n          lastWord.content += word.content;\n          word.content = '';\n        }\n        lastWord = word;\n      });\n    });\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\n"],
  "mappings": "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",
  "names": ["CR_NEWLINE_R", "TAB_R", "FORMFEED_R", "preprocess", "source", "replace", "populateInitialState", "givenState", "defaultState", "state", "prop", "Object", "prototype", "hasOwnProperty", "call", "parserFor", "rules", "ruleList", "keys", "filter", "type", "rule", "match", "order", "isFinite", "console", "warn", "String", "sort", "typeA", "typeB", "ruleA", "ruleB", "orderA", "orderB", "secondaryOrderA", "quality", "secondaryOrderB", "latestState", "nestedParse", "result", "ruleType", "capture", "NaN", "i", "currRuleType", "currRule", "currOrder", "prevCaptureStr", "prevCapture", "currCapture", "currQuality", "Error", "length", "index", "parsed", "parse", "Array", "isArray", "push", "apply", "substring", "outerParse", "inline", "disableAutoBlockNewlines", "inlineRegex", "regex", "exec", "blockRegex", "anyScopeRegex", "TYPE_SYMBOL", "Symbol", "for", "reactElement", "key", "props", "element", "$$typeof", "undefined", "ref", "_owner", "htmlTag", "tagName", "content", "attributes", "isClosed", "attributeString", "attr", "attribute", "sanitizeText", "unclosedTag", "EMPTY_PROPS", "sanitizeUrl", "url", "prot", "URL", "protocol", "indexOf", "SANITIZE_TEXT_R", "SANITIZE_TEXT_CODES", "text", "chr", "UNESCAPE_URL_R", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "parseBlock", "parseCaptureInline", "ignoreCapture", "LIST_BULLET", "LIST_ITEM_PREFIX", "LIST_ITEM_PREFIX_R", "RegExp", "LIST_ITEM_R", "BLOCK_END_R", "INLINE_CODE_ESCAPE_BACKTICKS_R", "LIST_BLOCK_END_R", "LIST_ITEM_END_R", "LIST_R", "LIST_LOOKBEHIND_R", "TABLES", "TABLE_ROW_SEPARATOR_TRIM", "TABLE_CELL_END_TRIM", "TABLE_RIGHT_ALIGN", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "parseTableAlignCapture", "alignCapture", "test", "parseTableAlign", "trimEndSeparators", "alignText", "trim", "split", "map", "parseTableRow", "prevInTable", "inTable", "tableRow", "cells", "forEach", "node", "parseTableCells", "rowsText", "rowText", "parseTable", "header", "align", "parseNpTable", "TABLE_REGEX", "NPTABLE_REGEX", "LINK_INSIDE", "LINK_HREF_AND_TITLE", "AUTOLINK_MAILTO_CHECK_R", "parseRef", "refNode", "toLowerCase", "_defs", "def", "target", "title", "_refs", "defaultRules", "react", "arr", "output", "oldKey", "html", "heading", "_parse", "_x", "_x2", "_x3", "level", "children", "nptable", "lheading", "_parse2", "_x4", "_x5", "_x6", "hr", "codeBlock", "_parse3", "_x7", "_x8", "_x9", "lang", "className", "class", "fence", "_parse4", "_x10", "_x11", "_x12", "blockQuote", "_parse5", "_x13", "_x14", "_x15", "list", "isStartOfLineCapture", "isListBlock", "_list", "_parse6", "_x16", "_x17", "_x18", "bullet", "ordered", "start", "items", "lastItemWasAParagraph", "itemContent", "item", "prefixCapture", "space", "spaceRegex", "isLastItem", "containsBlocks", "thisItemIsAParagraph", "oldStateInline", "oldStateList", "adjustedContent", "ListWrapper", "listItems", "join", "listTag", "_parse7", "_x19", "_x20", "_x21", "table", "getStyle", "colIndex", "textAlign", "headers", "style", "scope", "rows", "row", "r", "c", "cols", "thead", "tbody", "newline", "paragraph", "escape", "_parse8", "_x22", "_x23", "_x24", "tableSeparator", "autolink", "_parse9", "_x25", "_x26", "_x27", "mailto", "_parse10", "_x28", "_x29", "_x30", "address", "_parse11", "_x31", "_x32", "_x33", "link", "_parse12", "_x34", "_x35", "_x36", "href", "image", "_parse13", "_x37", "_x38", "_x39", "alt", "src", "reflink", "_parse14", "_x40", "_x41", "_x42", "refimage", "_parse15", "_x43", "_x44", "_x45", "em", "_parse16", "_x46", "_x47", "_x48", "strong", "u", "del", "inlineCode", "_parse17", "_x49", "_x50", "_x51", "br", "_parse18", "_x52", "_x53", "_x54", "ruleOutput", "property", "nestedRuleOutput", "ast", "outputFunc", "reactFor", "nestedOutput", "lastResult", "nodeOut", "htmlFor", "outputFor", "arrayRule", "arrayRuleCheck", "arrayRuleOutput", "outerOutput", "defaultRawParse", "defaultBlockParse", "defaultInlineParse", "defaultImplicitParse", "isBlock", "defaultReactOutput", "defaultHtmlOutput", "markdownToReact", "markdownToHtml", "ReactMarkdown", "divProps", "SimpleMarkdown", "defaultParse", "arguments", "defaultOutput", "preprocessMarkdown", "markdown", "markdownToLines", "preprocessedMarkdown", "mdParse", "SimpleMarkdown", "syntaxTree", "lines", "currentLine", "processNode", "node", "parentType", "textLine", "index", "word", "contentNode", "treeNode", "markdownToHTML", "output", "applyStyle", "dom", "styleFn", "addHtmlSpan", "element", "width", "classes", "fo", "div", "label", "labelClass", "bbox", "createTspan", "textElement", "lineIndex", "lineHeight", "createFormattedText", "g", "structuredText", "addBackground", "labelGroup", "bkg", "line", "tspan", "words", "currentWord", "wrappedLine", "updateTextContentAndStyles", "padding", "innerTspan", "createText", "el", "text", "style", "isTitle", "useHtmlLabels", "isNode", "addSvgBackground", "log", "htmlText", "decodeEntities", "s", "special", "lastWord"]
}
