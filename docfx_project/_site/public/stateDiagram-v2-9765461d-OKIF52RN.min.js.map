{
  "version": 3,
  "sources": ["../../node_modules/mermaid/src/diagrams/state/stateRenderer-v2.js", "../../node_modules/mermaid/src/diagrams/state/stateDiagram-v2.ts"],
  "sourcesContent": ["import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select } from 'd3';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport { log } from '../../logger';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport utils from '../../utils';\n\nimport {\n  DEFAULT_DIAGRAM_DIRECTION,\n  DEFAULT_NESTED_DOC_DIR,\n  STMT_STATE,\n  STMT_RELATION,\n  DEFAULT_STATE_TYPE,\n  DIVIDER_TYPE,\n} from './stateCommon';\n\n// --------------------------------------\n// Shapes\nconst SHAPE_STATE = 'rect';\nconst SHAPE_STATE_WITH_DESC = 'rectWithTitle';\nconst SHAPE_START = 'start';\nconst SHAPE_END = 'end';\nconst SHAPE_DIVIDER = 'divider';\nconst SHAPE_GROUP = 'roundedWithTitle';\nconst SHAPE_NOTE = 'note';\nconst SHAPE_NOTEGROUP = 'noteGroup';\n\n// --------------------------------------\n// CSS classes\nconst CSS_DIAGRAM = 'statediagram';\nconst CSS_STATE = 'state';\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = 'transition';\nconst CSS_NOTE = 'note';\nconst CSS_NOTE_EDGE = 'note-edge';\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = 'cluster';\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = 'cluster-alt';\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\n\n// --------------------------------------\n// DOM and element IDs\nconst PARENT = 'parent';\nconst NOTE = 'note';\nconst DOMID_STATE = 'state';\nconst DOMID_TYPE_SPACER = '----';\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\n// --------------------------------------\n// Graph edge settings\nconst G_EDGE_STYLE = 'fill:none';\nconst G_EDGE_ARROWHEADSTYLE = 'fill: #333';\nconst G_EDGE_LABELPOS = 'c';\nconst G_EDGE_LABELTYPE = 'text';\nconst G_EDGE_THICKNESS = 'normal';\n\n// --------------------------------------\n// List of nodes created from the parsed diagram statement items\nlet nodeDb = {};\n\nlet graphItemCount = 0; // used to construct ids, etc.\n\n// Configuration\nconst conf = {};\n\n// -----------------------------------------------------------------------\n\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Returns the all the classdef styles (a.k.a. classes) from classDef statements in the graph definition.\n *\n * @param {string} text - the diagram text to be parsed\n * @param diagramObj\n * @returns {object} ClassDef styles (a Map with keys = strings, values = )\n */\nexport const getClasses = function (text, diagramObj) {\n  log.trace('Extracting classes');\n  diagramObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagramObj.parser.parse(text);\n    // must run extract() to turn the parsed statements into states, relationships, classes, etc.\n    diagramObj.db.extract(diagramObj.db.getRootDocV2());\n    return diagramObj.db.getClasses();\n  } catch (e) {\n    return e;\n  }\n};\n\n/**\n * Get classes from the db for the info item.\n * If there aren't any or if dbInfoItem isn't defined, return an empty string.\n * Else create 1 string from the list of classes found\n *\n * @param {undefined | null | object} dbInfoItem\n * @returns {string}\n */\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === undefined || dbInfoItem === null) {\n    return '';\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(' ');\n    } else {\n      return '';\n    }\n  }\n}\n\n/**\n * Create a standard string for the dom ID of an item.\n * If a type is given, insert that before the counter, preceded by the type spacer\n *\n * @param itemId\n * @param counter\n * @param {string | null} type\n * @param typeSpacer\n * @returns {string}\n */\nexport function stateDomId(itemId = '', counter = 0, type = '', typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : '';\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\n\n/**\n * Create a graph node based on the statement information\n *\n * @param g - graph\n * @param {object} parent\n * @param {object} parsedItem - parsed statement item\n * @param {object[]} diagramStates - the list of all known  states for the diagram\n * @param {object} diagramDb\n * @param {boolean} altFlag - for clusters, add the \"statediagram-cluster-alt\" CSS class\n */\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n\n  if (itemId !== 'root') {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n\n    // Add the node to our list (nodeDb)\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`,\n      };\n    }\n\n    const newNode = nodeDb[itemId];\n\n    // Save data for description and group so that for instance a statement without description overwrites\n    // one with description  @todo TODO What does this mean? If important, add a test for it\n\n    // Build of the array of description strings\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        // There already is an array of strings,add to it\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          // if there is a description already transform it to an array\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            // If the previous description was this, remove it\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n\n    // If there's only 1 description entry, just use a regular state shape\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n\n    // group\n    if (!newNode.type && parsedItem.doc) {\n      log.info('Setting cluster for ', itemId, getDir(parsedItem));\n      newNode.type = 'group';\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes =\n        newNode.classes +\n        ' ' +\n        CSS_DIAGRAM_CLUSTER +\n        ' ' +\n        (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : '');\n    }\n\n    // This is what will be added to the graph\n    const nodeData = {\n      labelStyle: '',\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: '', //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15, //getConfig().flowchart.padding\n    };\n    // if (useHtmlLabels) {\n    nodeData.centerLabel = true;\n    // }\n\n    if (parsedItem.note) {\n      // Todo: set random id\n      const noteData = {\n        labelStyle: '',\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: '', // styles.style,\n        id: itemId + NOTE_ID + '-' + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15, //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: '',\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: '', // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: 'group',\n        padding: 0, //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n\n      let from = itemId;\n      let to = noteData.id;\n\n      if (parsedItem.note.position === 'left of') {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: 'none',\n        arrowType: '',\n        style: G_EDGE_STYLE,\n        labelStyle: '',\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS,\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n\n  if (parent && parent.id !== 'root') {\n    log.trace('Setting node ', itemId, ' to be child of its parent ', parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace('Adding nodes children ');\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\n\n/**\n * Turn parsed statements (item.stmt) into nodes, relationships, etc. for a document.\n * (A document may be nested within others.)\n *\n * @param g\n * @param parentParsedItem - parsed Item that is the parent of this document (doc)\n * @param doc - the document to set up; it is a list of parsed statements\n * @param {object[]} diagramStates - the list of all known states for the diagram\n * @param diagramDb\n * @param {boolean} altFlag\n * @todo This duplicates some of what is done in stateDb.js extract method\n */\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  // graphItemCount = 0;\n  log.trace('items', doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: 'edge' + graphItemCount,\n            arrowhead: 'normal',\n            arrowTypeEnd: 'arrow_barb',\n            style: G_EDGE_STYLE,\n            labelStyle: '',\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE,\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\n\n/**\n * Get the direction from the statement items.\n * Look through all of the documents (docs) in the parsedItems\n * Because is a _document_ direction, the default direction is not necessarily the same as the overall default _diagram_ direction.\n * @param {object[]} parsedItem - the parsed statement item to look through\n * @param [defaultDir=DEFAULT_NESTED_DOC_DIR] - the direction to use if none is found\n * @returns {string}\n */\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === 'dir') {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\n\n/**\n * Draws a state diagram in the tag with id: id based on the graph definition in text.\n *\n * @param {any} text\n * @param {any} id\n * @param _version\n * @param diag\n */\nexport const draw = function (text, id, _version, diag) {\n  log.info('Drawing state diagram (v2)', id);\n  // diag.sb.clear();\n  nodeDb = {};\n  // Fetch the default direction, use TD if none was found\n  let dir = diag.db.getDirection();\n  if (dir === undefined) {\n    dir = DEFAULT_DIAGRAM_DIRECTION;\n  }\n\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  log.info(diag.db.getRootDocV2());\n\n  // This parses the diagram text and sets the classes, relations, styles, classDefs, etc.\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n\n  const diagramStates = diag.db.getStates();\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: getDir(diag.db.getRootDocV2()),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  setupNode(g, undefined, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['barb'], CSS_DIAGRAM, id);\n\n  const padding = 8;\n\n  utils.insertTitle(svg, 'statediagramTitleText', conf.titleTopMargin, diag.db.getDiagramTitle());\n\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n\n  // Zoom in a bit\n  svg.attr('class', CSS_DIAGRAM);\n\n  const svgBounds = svg.node().getBBox();\n\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n\n  // Ensure the viewBox includes the whole svgBounds area with extra space for padding\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr('viewBox', vBox);\n\n  // Add label rects for non html labels\n  // if (!evaluate(conf.htmlLabels) || true) {\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    // Get dimensions of label\n    const dim = label.getBBox();\n\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', SHAPE_STATE);\n    rect.setAttribute('rx', 0);\n    rect.setAttribute('ry', 0);\n    rect.setAttribute('width', dim.width);\n    rect.setAttribute('height', dim.height);\n\n    label.insertBefore(rect, label.firstChild);\n    // }\n  }\n};\n\nexport default {\n  setConf,\n  getClasses,\n  draw,\n};\n", "import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/stateDiagram';\nimport db from './stateDb';\nimport styles from './styles';\nimport renderer from './stateRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],
  "mappings": "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",
  "names": ["SHAPE_STATE", "SHAPE_STATE_WITH_DESC", "SHAPE_START", "SHAPE_END", "SHAPE_DIVIDER", "SHAPE_GROUP", "SHAPE_NOTE", "SHAPE_NOTEGROUP", "CSS_DIAGRAM", "CSS_STATE", "CSS_DIAGRAM_STATE", "CSS_EDGE", "CSS_NOTE", "CSS_NOTE_EDGE", "CSS_EDGE_NOTE_EDGE", "CSS_DIAGRAM_NOTE", "CSS_CLUSTER", "CSS_DIAGRAM_CLUSTER", "CSS_CLUSTER_ALT", "CSS_DIAGRAM_CLUSTER_ALT", "PARENT", "NOTE", "DOMID_STATE", "DOMID_TYPE_SPACER", "NOTE_ID", "PARENT_ID", "G_EDGE_STYLE", "G_EDGE_ARROWHEADSTYLE", "G_EDGE_LABELPOS", "G_EDGE_LABELTYPE", "G_EDGE_THICKNESS", "nodeDb", "graphItemCount", "setConf", "cnf", "keys", "key", "getClasses", "text", "diagramObj", "log", "e", "getClassesFromDbInfo", "dbInfoItem", "stateDomId", "itemId", "counter", "type", "typeSpacer", "typeStr", "setupNode", "g", "parent", "parsedItem", "diagramStates", "diagramDb", "altFlag", "classStr", "shape", "DEFAULT_STATE_TYPE", "common", "getConfig", "newNode", "getDir", "DIVIDER_TYPE", "nodeData", "noteData", "groupData", "parentNodeId", "from", "to", "setupDoc", "parentParsedItem", "doc", "item", "STMT_STATE", "STMT_RELATION", "edgeData", "defaultDir", "DEFAULT_NESTED_DOC_DIR", "dir", "parsedItemDoc", "draw", "id", "_version", "diag", "DEFAULT_DIAGRAM_DIRECTION", "securityLevel", "conf", "nodeSpacing", "rankSpacing", "Graph", "sandboxElement", "select_default", "root", "svg", "element", "render", "padding", "utils", "bounds", "width", "height", "svgBounds", "configureSvgSize", "vBox", "labels", "label", "dim", "rect", "renderer", "diagram", "parser$1", "db", "styles"]
}
