name: DevSkim_VSCode_Release_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger: none
pr: none

resources:
  repositories:
    - repository: templates
      type: git
      name: Data/OSS-Tools-Pipeline-Templates
      ref: refs/tags/v2.0.4
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceRepositoriesToScan:
        exclude:
          - repository: 1esPipelines
          - repository: templates
    pool:
      name: MSSecurity-1ES-Build-Agents-Pool
      image: MSSecurity-1ES-Windows-2022
      os: windows
    stages:
    - stage: Build
      dependsOn: []
      jobs:
      - job: build_vscode_plugin
        displayName: Build VS Code Plugin
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.StagingDirectory)/packages
            artifactName: 'Unsigned_Plugin'
        steps:
        - task: NuGetAuthenticate@1
        - task: UseDotNet@2
          displayName: Install Dotnet SDK
          inputs:
            packageType: 'sdk'
            version: '8.0.x'
        - task: UseDotNet@2
          displayName: Install Dotnet SDK
          inputs:
            packageType: 'sdk'
            version: '9.0.x'
        - template: nbgv-set-version-steps.yml@templates
        - task: PowerShell@2
          displayName: Mkdir for Manifests and Packages
          inputs:
            targetType: 'inline'
            script: mkdir sbom/vscode/ ; mkdir sbom/langserver/ ; mkdir packages
            workingDirectory: '$(Build.StagingDirectory)'
        - task: Npm@1
          displayName: Package VS Code Plugin
          inputs:
            command: 'custom'
            workingDir: 'DevSkim-VSCode-Plugin/'
            customCommand: 'run pipeline-pack-release'
        - task: PowerShell@2
          displayName: Move Plugin File
          inputs:
            targetType: 'inline'
            script: 'mv DevSkim-VSCode-Plugin/*.vsix $env:BUILD_STAGINGDIRECTORY/packages/'
       
    - stage: Release
      dependsOn:
      - Build
      condition: succeeded()
      jobs:
      - job: sign_hash_release
        displayName: Code Sign, Generate Hashes, Publish Public Release
        templateContext:
          outputs:
          - output: pipelineArtifact
            path: '$(Build.StagingDirectory)'
            artifact: 'Signed_Binaries'
        steps:
        - template: nbgv-set-version-steps.yml@templates
        # set-version-steps only sets it for current job, while adding isOutput only sets it for future jobs
        # https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=powershell#set-an-output-variable-for-use-in-future-jobs
        - powershell: |
              $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
              Write-Host "##vso[task.setvariable variable=releaseVersion;isOutput=true]$version"
          name: outputReleaseVersionVar
        - task: DownloadPipelineArtifact@2
          displayName: Retrieve Unsigned Artifact 
          inputs:
            buildType: 'current'
            artifactName: 'Unsigned_Plugin'
            targetPath: '$(Build.BinariesDirectory)\Unsigned_Plugin'
        - task: AntiMalware@4
          displayName: Anti-Malware Scan
          inputs:
            InputType: 'Basic'
            ScanType: 'CustomScan'
            FileDirPath: '$(Build.BinariesDirectory)'
            EnableServices: true
            SupportLogOnError: true
            TreatSignatureUpdateFailureAs: 'Warning'
            SignatureFreshness: 'UpToDate'
            TreatStaleSignatureAs: 'Warning'
        - task: EsrpCodeSigning@5
          displayName: Code Sign VSCode Plugin
          inputs:
            ConnectedServiceName: 'oss-esrp-signing-v5-connection'
            AppRegistrationClientId: '8694c10c-c89d-4231-9dca-36cb80737ad0'
            AppRegistrationTenantId: '33e01921-4d64-4f8c-a055-5bdaffd5e33d'
            AuthAKVName: 'oss-signing-vault'
            AuthCertName: 'oss-esrp-auth-cert'
            AuthSignCertName: 'oss-esrp-signing-cert'
            FolderPath: '$(Build.BinariesDirectory)\Unsigned_Plugin'
            Pattern: '*.vsix'
            signConfigType: 'inlineSignParams'
            inlineOperation: |
              [
                      {
                          "KeyCode" : "CP-233016",
                          "OperationCode" : "OpcSign",
                          "Parameters" : {
                              "FileDigest" : "/fd SHA256"
                          },
                          "ToolName" : "sign",
                          "ToolVersion" : "1.0"
                      },
                      {
                          "KeyCode" : "CP-233016",
                          "OperationCode" : "OpcVerify",
                          "Parameters" : {},
                          "ToolName" : "sign",
                          "ToolVersion" : "1.0"
                      }
                  ]
            SessionTimeout: '60'
            MaxConcurrency: '50'
            MaxRetryAttempts: '5'

        - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
          displayName: 'Delete Code Sign Summaries'

        - task: PowerShell@2
          displayName: Move Plugin File
          inputs:
            targetType: 'inline'
            script: 'mv $env:BUILD_BINARIESDIRECTORY/Unsigned_Plugin/*.vsix $env:BUILD_STAGINGDIRECTORY/'

        - task: CmdLine@2
          displayName: 'List files in StagingDirectory'
          inputs:
            script: dir /B
            workingDirectory: '$(Build.StagingDirectory)'

        # Install dependencies and VS Code Extension Manager (vsce >= v2.26.1 needed)
        - script: |
              cd $(Build.StagingDirectory)
              npm install -g @vscode/vsce
              npm install
          displayName: "Install vsce and dependencies"

        # Publish to marketplace
        - task: AzureCLI@2
          displayName: 'Publishing with Managed Identity'  
          inputs:
            azureSubscription: oss-vs-marketplace-publish-mi-connection
            scriptType: "pscore"
            scriptLocation: 'inlineScript'
            workingDirectory: '$(Build.StagingDirectory)'
            inlineScript: |
                $packPath = Resolve-Path $env:BUILD_STAGINGDIRECTORY\*.vsix
                if ("$(ReleaseVersion)".Contains("-"))
                {
                    echo "Publishing as --pre-release = $(ReleaseVersion)"
                    vsce publish --packagePath $packPath --pre-release --azure-credential
                }
                else
                {
                    echo "Publishing as official release = $(ReleaseVersion)"
                    vsce publish --packagePath $packPath --azure-credential
                }
      - job: gitHubReleaseJob
        # Based on Documentation: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/releasepipelines/releaseworkflows/releasejob?tabs=standardreleasejob
        displayName: GitHub Release Job
        dependsOn: sign_hash_release
        variables:
          ReleaseVersion: $[ dependencies.sign_hash_release.outputs['outputReleaseVersionVar.releaseVersion'] ]
        # pool: you can optionally specify pool as you would normally do for a standard job
        templateContext:
          type: releaseJob  # Required, this indicates this job is a release job
          isProduction: true  # Required, must be 'true' or 'false'
          inputs:  # All input build artifacts must be declared here
          - input: pipelineArtifact  # Required, type of the input artifact
            artifactName: Signed_Binaries  # Required, name of the pipeline artifact
            targetPath: $(Pipeline.Workspace)/drop  # Optional, specifies where the artifact is downloaded
        steps:
        - task: GitHubRelease@1
          displayName: Release to GitHub
          inputs:
            gitHubConnection: 'github.com_gfs'
            repositoryName: 'microsoft/DevSkim'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'userSpecifiedTag'
            tag: 'VSCode_v$(ReleaseVersion)'
            title: 'DevSkim VS Code Extension v$(ReleaseVersion)'
            assets: |
              $(Build.StagingDirectory)/*.vsix
            changeLogCompareToRelease: 'lastNonDraftRelease'
            changeLogType: 'commitBased'