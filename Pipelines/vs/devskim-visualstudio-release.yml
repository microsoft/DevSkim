# Azure Pipelines
# https://aka.ms/yaml

name: DevSkim_VisualStudio_Release_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - v/0.6
  paths:
    include:
    - DevSkim-DotNet/*
    - rules/*
pr: none

resources:
  repositories:
    - repository: templates
      type: git
      name: SecurityEngineering/OSS-Tools-Pipeline-Templates
      ref: refs/tags/v1.0.5

stages:
- stage: SDL
  dependsOn: []
  jobs:
  - template: sdl-job.yml@templates
    parameters:
      serviceTreeID: '9792b8d3-bc2c-432c-8fc9-bdb143552208'

- stage: Build
  dependsOn: []
  jobs:
  - template: dotnet-build-job.yml@templates
    parameters:
      buildTool: 'msbuild'
      buildConfiguration: 'Release'
      dotnetVersion: '6.0.x'
      targetFramework: 'net47'
      projectPath: 'DevSkim-DotNet/Microsoft.DevSkim.VSExtension/Microsoft.DevSkim.VSExtension.csproj'
      projectName: 'DevSkim_VS'
      preBuild:
      - template: nbgv-set-version-steps.yml@templates
      - script: 'dotnet RulePacker/devskim.dll pack rules DevSkim-DotNet/Microsoft.DevSkim/Resources/devskim-rules.json'
        displayName: 'Pack DevSkim Rules'
      onEnd:
      - task: PowerShell@2
        displayName: Mkdir for Extension
        inputs:
          targetType: 'inline'
          script: mkdir extension
          workingDirectory: '$(Build.StagingDirectory)'
      - task: PowerShell@2
        displayName: Move Extension File
        inputs:
          targetType: 'inline'
          script: 'mv $env:BUILD_STAGINGDIRECTORY/bin/dotnetapp/DevSkim_VS_dotnetapp_$(ReleaseVersion)/*.vsix $env:BUILD_STAGINGDIRECTORY/extension'
      - task: PublishBuildArtifacts@1
        displayName: Pipeline Publish Extension
        inputs:
          PathtoPublish: '$(Build.StagingDirectory)/extension'
          ArtifactName: 'Unsigned_Extension'
          publishLocation: 'Container'

- stage: ReleaseValidation
  dependsOn:
  - SDL
  - Build
  jobs:
  - template: manual-validation-job.yml@templates
    parameters:
      instructions: 'This step performs a DevSkim VS extension release to GitHub and the VS Marketplace. Proceed?'

- stage: Release
  dependsOn:
  - ReleaseValidation
  condition: succeeded()
  jobs:
  - job: sign_hash_release
    displayName: Code Sign, Generate Hashes, Publish Public Release
    pool:
      name: 'OSS-Tools-1ESPool'
      vmImage: 'oss-tools-win2022_1es-managed'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Retrieve Unsigned Artifact 
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'Unsigned_Extension\*.vsix'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Warning'
    - task: EsrpCodeSigning@3
      displayName: Code Sign VS Extension
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)\Unsigned_Extension'
        Pattern: '*.vsix'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-233016",
                      "OperationCode" : "OpcSign",
                      "Parameters" : {
                          "FileDigest" : "/fd SHA256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-233016",
                      "OperationCode" : "OpcVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
      displayName: 'Delete Code Sign Summaries'
    - task: PowerShell@2
      displayName: Generate Hashes
      inputs:
        targetType: 'inline'
        script: |
          Get-ChildItem $(Build.StagingDirectory) | Foreach-Object {
            $name = $_.Name
            $tmp = (Get-FileHash "$(Build.StagingDirectory)\$name").Hash
            Add-Content $(Build.StagingDirectory)\HASHES.txt "$tmp`t$name"
          }
    - task: PowerShell@2
      displayName: Move Extension File
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_BINARIESDIRECTORY/Unsigned_Extension/*.vsix $env:BUILD_STAGINGDIRECTORY/'
    - task: PublishPipelineArtifact@1
      displayName: Publish Signed Artifact to Pipeline
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'Signed_Extension'
    - task: PowerShell@2
      displayName: Move VS Marketplace Manifest
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_SOURCESDIRECTORY/DevSkim-DotNet/Microsoft.DevSkim.VSExtension/vs-manifest.json $env:BUILD_STAGINGDIRECTORY/'
    - task: PowerShell@2
      displayName: Move Readme-gallery.txt
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_SOURCESDIRECTORY/DevSkim-DotNet/Microsoft.DevSkim.VSExtension/Content/readme-gallery.txt $env:BUILD_STAGINGDIRECTORY/'
    - task: PowerShell@2
      displayName: Deploy to VS Marketplace
      inputs:
        targetType: 'inline'
        script: |
          Install-Module VSSetup -Force
          $vsixPublisher = Join-Path -Path (Get-VSSetupInstance -All | Select-VSSetupInstance -Latest).installationPath -ChildPath "VSSDK\VisualStudioIntegration\Tools\Bin\VsixPublisher.exe" -Resolve
          $vsixPath = Resolve-Path $env:BUILD_STAGINGDIRECTORY\*.vsix -Relative
          & $vsixPublisher publish -payload $vsixPath -publishManifest $(Build.StagingDirectory)/vs-manifest.json -personalAccessToken $(VS_Token) -ignoreWarnings "VSIXValidatorWarning01,VSIXValidatorWarning02,VSIXValidatorWarning08"
        workingDirectory: '$(Build.StagingDirectory)'
    - task: GitHubRelease@1
      displayName: Release to GitHub
      inputs:
        gitHubConnection: 'DevSkim'
        repositoryName: 'microsoft/DevSkim'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: 'v$(ReleaseVersion)'
        title: 'DevSkim VS Extension v$(ReleaseVersion)'
        assets: |
          $(Build.StagingDirectory)/*.vsix
        changeLogCompareToRelease: 'lastNonDraftRelease'
        changeLogType: 'commitBased'
